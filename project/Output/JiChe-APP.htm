<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\JiChe-APP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\JiChe-APP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Aug 04 22:24:41 2025
<BR><P>
<H3>Maximum Stack Usage =        320 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; App_Sci &rArr; App_CommonUpper &rArr; App_CommonUpperSCI3 &rArr; Sci_Deal_WrReg_0x06 &rArr; Sci_WrReg_0x06_Reset_CalibCoef &rArr; WriteEEPROM_Word_WithZone &rArr; WriteEEPROM_Word_NoZone &rArr; WriteEEPROM_Byte &rArr; IIC_Wait_Ack_SEE &rArr; IIC_Stop_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[39]">ADC3_ADC4_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[22]">ATIM1_BRK_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[25]">ATIM1_CC_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[24]">ATIM1_TRG_COM_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[23]">ATIM1_UP_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[35]">ATIM2_BRK_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[38]">ATIM2_CC_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[37]">ATIM2_TRG_COM_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[36]">ATIM2_UP_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[66]">ATIM3_BRK_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[69]">ATIM3_CC_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[68]">ATIM3_TRG_COM_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[67]">ATIM3_UP_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[3f]">BTIM1_IRQHandler</a> from timer.o(i.BTIM1_IRQHandler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[40]">BTIM2_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from n32h47x_48x_it.o(i.BusFault_Handler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[59]">COMP1_2_3_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[47]">COMP4_5_6_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[5d]">COMP7_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[6e]">Cordic_IRQ_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[75]">DAC1_2_3_4_Underflow_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[76]">DAC5_6_7_8_Underflow_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[55]">DMA1_Channel8_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[41]">DMA2_Channel1_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[42]">DMA2_Channel2_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[43]">DMA2_Channel3_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[44]">DMA2_Channel4_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[45]">DMA2_Channel5_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel6_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel7_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[56]">DMA2_Channel8_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from n32h47x_48x_it.o(i.DebugMon_Handler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from n32h47x_48x_it.o(i.EXTI0_IRQHandler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from n32h47x_48x_it.o(i.EXTI15_10_IRQHandler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from n32h47x_48x_it.o(i.EXTI1_IRQHandler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from n32h47x_48x_it.o(i.EXTI2_IRQHandler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from n32h47x_48x_it.o(i.EXTI9_5_IRQHandler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[1f]">FDCAN1_INT0_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[20]">FDCAN1_INT1_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[48]">FDCAN2_INT0_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[49]">FDCAN2_INT1_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[4a]">FDCAN3_INT0_IRQHandler</a> from n32h47x_48x_it.o(i.FDCAN3_INT0_IRQHandler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[4b]">FDCAN3_INT1_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[77]">FEMC_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[6d]">FMAC_IRQ_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[74]">GTIM10_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[26]">GTIM1_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[27]">GTIM2_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[28]">GTIM3_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[3b]">GTIM4_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[5c]">GTIM5_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[6a]">GTIM6_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[71]">GTIM7_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[72]">GTIM8_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[73]">GTIM9_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from n32h47x_48x_it.o(i.HardFault_Handler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[50]">I2C3_ER_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[4f]">I2C3_EV_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[52]">I2C4_ER_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[51]">I2C4_EV_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[6b]">LPTIM1_WKUP_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[6c]">LPTIM2_WKUP_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from n32h47x_48x_it.o(i.MemManage_Handler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from n32h47x_48x_it.o(i.NMI_Handler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[c]">RTC_TAMPER_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[57]">SAC_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[65]">SHRT1_FLT_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[5e]">SHRT1_MST_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[5f]">SHRT1_TIMA_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[60]">SHRT1_TIMB_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[61]">SHRT1_TIMC_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[62]">SHRT1_TIMD_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[63]">SHRT1_TIME_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[64]">SHRT1_TIMF_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[58]">SMPU_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[2e]">SPI2_I2S2_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[3c]">SPI3_I2S3_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[5b]">SPI4_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[6f]">SPI5_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[70]">SPI6_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[46]">SRAM_ERR_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from n32h47x_48x_it.o(i.SVC_Handler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from n32h47x_48x_it.o(i.SysTick_Handler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[79]">SystemInit</a> from system_n32h47x_48x.o(i.SystemInit) referenced from startup_n32h474.o(.text)
 <LI><a href="#[3e]">UART5_IRQHandler</a> from n32h47x_48x_it.o(i.UART5_IRQHandler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[53]">UART6_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[54]">UART7_IRQHandler</a> from n32h47x_48x_it.o(i.UART7_IRQHandler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[5a]">UART8_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[3a]">UCDR_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from n32h47x_48x_it.o(i.USART1_IRQHandler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from n32h47x_48x_it.o(i.USART3_IRQHandler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[3d]">USART4_IRQHandler</a> from n32h47x_48x_it.o(i.USART4_IRQHandler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[1d]">USB_FS_HP_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[1e]">USB_FS_LP_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[34]">USB_FS_WKUP_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from n32h47x_48x_it.o(i.UsageFault_Handler) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[4c]">XSPI_IRQHandler</a> from startup_n32h474.o(.text) referenced from startup_n32h474.o(RESET)
 <LI><a href="#[7a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_n32h474.o(.text)
 <LI><a href="#[78]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(.text)
</UL>
<P><STRONG><a name="[26b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[7b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[26c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[26d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[26e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[26f]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[270]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[271]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ATIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ATIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ATIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ATIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ATIM2_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ATIM2_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>ATIM2_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ATIM2_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>ATIM3_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>ATIM3_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>ATIM3_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>ATIM3_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>BTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>COMP4_5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>COMP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>Cordic_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DAC1_2_3_4_Underflow_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DAC5_6_7_8_Underflow_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN1_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FDCAN2_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>FDCAN2_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FDCAN3_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>FEMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>FMAC_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>GTIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>GTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>GTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>GTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>GTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GTIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GTIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GTIM8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GTIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>LPTIM1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>LPTIM2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SHRT1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SHRT1_MST_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SHRT1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SHRT1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SHRT1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SHRT1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SHRT1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SHRT1_TIMF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SMPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_I2S2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI3_I2S3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SRAM_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UCDR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_FS_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_FS_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>XSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h474.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[272]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[273]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_InitRegs
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_Reset_ProtectElement
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_Reset_OtherCanAdd
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_Reset_HeatCool
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_ResetData_AllToDefault
</UL>

<P><STRONG><a name="[274]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[275]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[216]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_ResetData_AllToDefault
</UL>

<P><STRONG><a name="[277]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_ChipTemp
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_CurrentWithCC2
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_ChipTemp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VCell
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VPACK
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VLOAD
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VBAT
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_V1P8
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_BatTemp
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_CurrentWithCC2
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_CurrentWithCC2
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VCell
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_ChipTemp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VCell
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VPACK
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VLOAD
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VBAT
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_V1P8
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_BatTemp
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_CurrentWithCC2
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_CurrentWithCC2
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_ChipTemp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VCell
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VPACK
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VLOAD
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VBAT
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_V1P8
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_BatTemp
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[278]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[27a]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[85]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[27b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>ADC_CalibrationOperation</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, n32h47x_48x_adc.o(i.ADC_CalibrationOperation))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC1
</UL>

<P><STRONG><a name="[1b4]"></a>ADC_ConfigInjectedSequencerLength</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32h47x_48x_adc.o(i.ADC_ConfigInjectedSequencerLength))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC1
</UL>

<P><STRONG><a name="[1b6]"></a>ADC_ConfigInt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32h47x_48x_adc.o(i.ADC_ConfigInt))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC1
</UL>

<P><STRONG><a name="[1b3]"></a>ADC_ConfigRegularChannel</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, n32h47x_48x_adc.o(i.ADC_ConfigRegularChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConfigRegularChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC1
</UL>

<P><STRONG><a name="[1b8]"></a>ADC_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32h47x_48x_adc.o(i.ADC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC1
</UL>

<P><STRONG><a name="[1b5]"></a>ADC_EnableAutoInjectedConv</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32h47x_48x_adc.o(i.ADC_EnableAutoInjectedConv))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC1
</UL>

<P><STRONG><a name="[1bb]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32h47x_48x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC1
</UL>

<P><STRONG><a name="[1b9]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32h47x_48x_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC1
</UL>

<P><STRONG><a name="[1b2]"></a>ADC_Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, n32h47x_48x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC1
</UL>

<P><STRONG><a name="[1b7]"></a>ADC_SetDMATransferMode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, n32h47x_48x_adc.o(i.ADC_SetDMATransferMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SetDMATransferMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC1
</UL>

<P><STRONG><a name="[a7]"></a>ADC_SmallDsgCur</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, adc_deal.o(i.ADC_SmallDsgCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_SmallDsgCur
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ADC
</UL>

<P><STRONG><a name="[90]"></a>ADC_TTC</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, adc_deal.o(i.ADC_TTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADC_TTC &rArr; GetEndValue
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEndValue
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ADC
</UL>

<P><STRONG><a name="[a8]"></a>ADC_V3_3</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, adc_deal.o(i.ADC_V3_3))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ADC
</UL>

<P><STRONG><a name="[92]"></a>AFE_MosInit</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, short_current.o(i.AFE_MosInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AFE_MosInit &rArr; PDSG_FETControl &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDSG_FETControl
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSFM_Control
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSG_FETControl
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSGM_Control
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPC_Config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHG_FETControl
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitShortCur
</UL>

<P><STRONG><a name="[9a]"></a>AFE_ProtectInit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, short_current.o(i.AFE_ProtectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = AFE_ProtectInit &rArr; OCD2_Config &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UV_Config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV_Config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCD2_Config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCD1_Config
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCC2_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCC1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitShortCur
</UL>

<P><STRONG><a name="[a2]"></a>AFE_RST</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, reset.o(i.AFE_RST))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AFE_RST &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_InitFun
</UL>

<P><STRONG><a name="[d8]"></a>AllSeriesDeal_Charger_OFF</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, charger_loader_func.o(i.AllSeriesDeal_Charger_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargerLoad_Det
</UL>

<P><STRONG><a name="[d7]"></a>AllSeriesDeal_Charger_ON</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, charger_loader_func.o(i.AllSeriesDeal_Charger_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AllSeriesDeal_Charger_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargerLoad_Det
</UL>

<P><STRONG><a name="[a3]"></a>AllSeriesDeal_Sleep_Or_None</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, charger_loader_func.o(i.AllSeriesDeal_Sleep_Or_None))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AllSeriesDeal_Sleep_Or_None &rArr; System_ERROR_UserCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ERROR_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargerLoad_Det
</UL>

<P><STRONG><a name="[a5]"></a>App_ADC</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, adc_deal.o(i.App_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = App_ADC &rArr; ADC_TTC &rArr; GetEndValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_FUNC_StartUp
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_V3_3
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TTC
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SmallDsgCur
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>App_AFE_DataDeal</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, data_deal.o(i.App_AFE_DataDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = App_AFE_DataDeal &rArr; DataLoad_CellVolt &rArr; System_ERROR_UserCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLoad_Test
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLoad_TemperatureMaxMinFind
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLoad_Current
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLoad_CellVoltMaxMinFind
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLoad_CellVolt
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>App_BalanceProcess</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, balance.o(i.App_BalanceProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = App_BalanceProcess &rArr; Balance_Contrl &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_Contrl
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>App_BatOvp_FirstCheck</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fault.o(i.App_BatOvp_FirstCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_BatOvp_FirstCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[b5]"></a>App_BatOvp_SecondCheck</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fault.o(i.App_BatOvp_SecondCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_BatOvp_SecondCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[b6]"></a>App_BatOvp_ThirdCheck</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fault.o(i.App_BatOvp_ThirdCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_BatOvp_ThirdCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[b7]"></a>App_BatUvp_FirstCheck</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, fault.o(i.App_BatUvp_FirstCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_BatUvp_FirstCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[b8]"></a>App_BatUvp_SecondCheck</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fault.o(i.App_BatUvp_SecondCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_BatUvp_SecondCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[b9]"></a>App_BatUvp_ThirdCheck</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fault.o(i.App_BatUvp_ThirdCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_BatUvp_ThirdCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[ba]"></a>App_CBC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cbc.o(i.App_CBC))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = App_CBC &rArr; CBC_MOS &rArr; InitCBC &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBC_MOS
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>App_CanCom</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, can_com.o(i.App_CanCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CanCom &rArr; Can_TransmitDeal &rArr; CAN_TX_0x11 &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmiT_0x1F0
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_ReceiveDeal
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_BusOFF_Monitor
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_FUNC_StartUp
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>App_CellChgOtp_FirstCheck</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, fault.o(i.App_CellChgOtp_FirstCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellChgOtp_FirstCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[c2]"></a>App_CellChgOtp_SecondCheck</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, fault.o(i.App_CellChgOtp_SecondCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellChgOtp_SecondCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[c3]"></a>App_CellChgOtp_ThirdCheck</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, fault.o(i.App_CellChgOtp_ThirdCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellChgOtp_ThirdCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[c4]"></a>App_CellChgUtp_FirstCheck</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, fault.o(i.App_CellChgUtp_FirstCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellChgUtp_FirstCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[c5]"></a>App_CellChgUtp_SecondCheck</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, fault.o(i.App_CellChgUtp_SecondCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellChgUtp_SecondCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[c6]"></a>App_CellChgUtp_ThirdCheck</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, fault.o(i.App_CellChgUtp_ThirdCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellChgUtp_ThirdCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[c7]"></a>App_CellDisChgOtp_FirstCheck</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, fault.o(i.App_CellDisChgOtp_FirstCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellDisChgOtp_FirstCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[c8]"></a>App_CellDisChgOtp_SecondCheck</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, fault.o(i.App_CellDisChgOtp_SecondCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellDisChgOtp_SecondCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[c9]"></a>App_CellDisChgOtp_ThirdCheck</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, fault.o(i.App_CellDisChgOtp_ThirdCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellDisChgOtp_ThirdCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[ca]"></a>App_CellDischgUtp_FirstCheck</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, fault.o(i.App_CellDischgUtp_FirstCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellDischgUtp_FirstCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[cb]"></a>App_CellDischgUtp_SecondCheck</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, fault.o(i.App_CellDischgUtp_SecondCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellDischgUtp_SecondCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[cc]"></a>App_CellDischgUtp_ThirdCheck</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, fault.o(i.App_CellDischgUtp_ThirdCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellDischgUtp_ThirdCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[cd]"></a>App_CellOvp_FirstCheck</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fault.o(i.App_CellOvp_FirstCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellOvp_FirstCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[ce]"></a>App_CellOvp_SecondCheck</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fault.o(i.App_CellOvp_SecondCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellOvp_SecondCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[cf]"></a>App_CellOvp_ThirdCheck</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fault.o(i.App_CellOvp_ThirdCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellOvp_ThirdCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[d0]"></a>App_CellSocUp_FirstCheck</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fault.o(i.App_CellSocUp_FirstCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellSocUp_FirstCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[d1]"></a>App_CellSocUp_SecondCheck</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fault.o(i.App_CellSocUp_SecondCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellSocUp_SecondCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[d2]"></a>App_CellSocUp_ThirdCheck</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fault.o(i.App_CellSocUp_ThirdCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellSocUp_ThirdCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[d3]"></a>App_CellUvp_FirstCheck</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, fault.o(i.App_CellUvp_FirstCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellUvp_FirstCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[d4]"></a>App_CellUvp_SecondCheck</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fault.o(i.App_CellUvp_SecondCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellUvp_SecondCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[d5]"></a>App_CellUvp_ThirdCheck</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fault.o(i.App_CellUvp_ThirdCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_CellUvp_ThirdCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[d6]"></a>App_ChargerLoad_Det</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, charger_loader_func.o(i.App_ChargerLoad_Det))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_ChargerLoad_Det &rArr; AllSeriesDeal_Sleep_Or_None &rArr; System_ERROR_UserCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllSeriesDeal_Sleep_Or_None
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllSeriesDeal_Charger_ON
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllSeriesDeal_Charger_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>App_CommonUpper</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uart_upper.o(i.App_CommonUpper))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = App_CommonUpper &rArr; App_CommonUpperSCI3 &rArr; Sci_Deal_WrReg_0x06 &rArr; Sci_WrReg_0x06_Reset_CalibCoef &rArr; WriteEEPROM_Word_WithZone &rArr; WriteEEPROM_Word_NoZone &rArr; WriteEEPROM_Byte &rArr; IIC_Wait_Ack_SEE &rArr; IIC_Stop_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI3
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI1
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Sci
</UL>

<P><STRONG><a name="[da]"></a>App_CommonUpperSCI1</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, uart_upper.o(i.App_CommonUpperSCI1))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = App_CommonUpperSCI1 &rArr; Sci_Deal_WrReg_0x06 &rArr; Sci_WrReg_0x06_Reset_CalibCoef &rArr; WriteEEPROM_Word_WithZone &rArr; WriteEEPROM_Word_NoZone &rArr; WriteEEPROM_Byte &rArr; IIC_Wait_Ack_SEE &rArr; IIC_Stop_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrRegs_0x10
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrReg_0x06
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_ReadRegs_0x03
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x06_0x10
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci1_CommonUpper_Tx_Deal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpper
</UL>

<P><STRONG><a name="[db]"></a>App_CommonUpperSCI2</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, uart_upper.o(i.App_CommonUpperSCI2))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = App_CommonUpperSCI2 &rArr; Sci_Deal_WrReg_0x06 &rArr; Sci_WrReg_0x06_Reset_CalibCoef &rArr; WriteEEPROM_Word_WithZone &rArr; WriteEEPROM_Word_NoZone &rArr; WriteEEPROM_Byte &rArr; IIC_Wait_Ack_SEE &rArr; IIC_Stop_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrRegs_0x10
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrReg_0x06
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_ReadRegs_0x03
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x06_0x10
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci2_CommonUpper_Tx_Deal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpper
</UL>

<P><STRONG><a name="[dc]"></a>App_CommonUpperSCI3</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, uart_upper.o(i.App_CommonUpperSCI3))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = App_CommonUpperSCI3 &rArr; Sci_Deal_WrReg_0x06 &rArr; Sci_WrReg_0x06_Reset_CalibCoef &rArr; WriteEEPROM_Word_WithZone &rArr; WriteEEPROM_Word_NoZone &rArr; WriteEEPROM_Byte &rArr; IIC_Wait_Ack_SEE &rArr; IIC_Stop_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci3_CommonUpper_FaultChk
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrRegs_0x10
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrReg_0x06
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_ReadRegs_0x03
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x06_0x10
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci3_CommonUpper_Tx_Deal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpper
</UL>

<P><STRONG><a name="[f2]"></a>App_DI1_Switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drivers_ctrl.o(i.App_DI1_Switch))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MOS_Relay_Ctrl
</UL>

<P><STRONG><a name="[e7]"></a>App_Heat_Cool_Ctrl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, heat_cool.o(i.App_Heat_Cool_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = App_Heat_Cool_Ctrl &rArr; Heat_Control &rArr; System_FUNC_StartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_Control
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cool_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>App_IchgOcp_FirstCheck</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, fault.o(i.App_IchgOcp_FirstCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_IchgOcp_FirstCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[eb]"></a>App_IchgOcp_SecondCheck</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, fault.o(i.App_IchgOcp_SecondCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_IchgOcp_SecondCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[ec]"></a>App_IchgOcp_ThirdCheck</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, fault.o(i.App_IchgOcp_ThirdCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_IchgOcp_ThirdCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[ed]"></a>App_IdischgOcp_FirstCheck</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, fault.o(i.App_IdischgOcp_FirstCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_IdischgOcp_FirstCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[ee]"></a>App_IdischgOcp_SecondCheck</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, fault.o(i.App_IdischgOcp_SecondCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_IdischgOcp_SecondCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[ef]"></a>App_IdischgOcp_ThirdCheck</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, fault.o(i.App_IdischgOcp_ThirdCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_IdischgOcp_ThirdCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[f0]"></a>App_MOS_Relay_Ctrl</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, drivers_ctrl.o(i.App_MOS_Relay_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = App_MOS_Relay_Ctrl &rArr; Drivers_External_Ctrl &rArr; CleanError &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drivers_Ctrl
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshData_Drivers
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_FUNC_StartUp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetData_Drivers
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drivers_PreCHG
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drivers_External_Ctrl
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DI1_Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>App_MosOtp_FirstCheck</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fault.o(i.App_MosOtp_FirstCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_MosOtp_FirstCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[f8]"></a>App_MosOtp_SecondCheck</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fault.o(i.App_MosOtp_SecondCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_MosOtp_SecondCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[f9]"></a>App_MosOtp_ThirdCheck</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fault.o(i.App_MosOtp_ThirdCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_MosOtp_ThirdCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[fa]"></a>App_ParaSave_Flash</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, parameter_save_flash.o(i.App_ParaSave_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = App_ParaSave_Flash &rArr; Para_WriteAll_DataDefault &rArr; Para_ResetData_AllToDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_WriteAll_DataRefresh
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_WriteAll_DataDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>App_PubOPUPChk</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, pub_func.o(i.App_PubOPUPChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = App_PubOPUPChk
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_VdeltaOp_ThirdCheck
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_VdeltaOp_SecondCheck
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_VdeltaOp_FirstCheck
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MosOtp_ThirdCheck
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MosOtp_SecondCheck
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MosOtp_FirstCheck
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IdischgOcp_ThirdCheck
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IdischgOcp_SecondCheck
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IdischgOcp_FirstCheck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IchgOcp_ThirdCheck
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IchgOcp_SecondCheck
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IchgOcp_FirstCheck
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellUvp_ThirdCheck
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellUvp_SecondCheck
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellUvp_FirstCheck
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellSocUp_ThirdCheck
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellSocUp_SecondCheck
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellSocUp_FirstCheck
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellOvp_ThirdCheck
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellOvp_SecondCheck
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellOvp_FirstCheck
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDischgUtp_ThirdCheck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDischgUtp_SecondCheck
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDischgUtp_FirstCheck
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDisChgOtp_ThirdCheck
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDisChgOtp_SecondCheck
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDisChgOtp_FirstCheck
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgUtp_ThirdCheck
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgUtp_SecondCheck
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgUtp_FirstCheck
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgOtp_ThirdCheck
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgOtp_SecondCheck
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgOtp_FirstCheck
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatUvp_ThirdCheck
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatUvp_SecondCheck
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatUvp_FirstCheck
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatOvp_ThirdCheck
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatOvp_SecondCheck
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatOvp_FirstCheck
</UL>

<P><STRONG><a name="[fd]"></a>App_SOC</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, soc_user.o(i.App_SOC))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = App_SOC &rArr; SOC_IntEnhance_Ctrl &rArr; SOC_Update_StartUp &rArr; CalcuSOC_StartUp &rArr; SOC_DealEEPROM_Data &rArr; Get_OpenCircuit_Value &rArr; GetEndValuee
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_FUNC_StartUp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_IntEnhance_Ctrl
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_OCV_Fix
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshData_SOC
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetData_SOC
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>App_Sci</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sci_com.o(i.App_Sci))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = App_Sci &rArr; App_CommonUpper &rArr; App_CommonUpperSCI3 &rArr; Sci_Deal_WrReg_0x06 &rArr; Sci_WrReg_0x06_Reset_CalibCoef &rArr; WriteEEPROM_Word_WithZone &rArr; WriteEEPROM_Word_NoZone &rArr; WriteEEPROM_Byte &rArr; IIC_Wait_Ack_SEE &rArr; IIC_Stop_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpper
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>App_ShortCurDeal_AFE</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, short_current.o(i.App_ShortCurDeal_AFE))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = App_ShortCurDeal_AFE &rArr; InitShortCur &rArr; AFE_ProtectInit &rArr; OCD2_Config &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ERROR_UserCallback
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanError
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitShortCur
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[266]"></a>App_SysPower</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, sys_pwr.o(i.App_SysPower))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[265]"></a>App_SysTime</STRONG> (Thumb, 512 bytes, Stack size 12 bytes, sys_timer.o(i.App_SysTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = App_SysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>App_Sys_FlashUpdate</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sys_pwr.o(i.App_Sys_FlashUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = App_Sys_FlashUpdate &rArr; __delay_ms &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>App_VdeltaOp_FirstCheck</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, fault.o(i.App_VdeltaOp_FirstCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_VdeltaOp_FirstCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[109]"></a>App_VdeltaOp_SecondCheck</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, fault.o(i.App_VdeltaOp_SecondCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_VdeltaOp_SecondCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[10a]"></a>App_VdeltaOp_ThirdCheck</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, fault.o(i.App_VdeltaOp_ThirdCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_VdeltaOp_ThirdCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ERROR_UserCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PubOPUPChk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
</UL>

<P><STRONG><a name="[10b]"></a>App_WarnCtrl</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, fault.o(i.App_WarnCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = App_WarnCtrl &rArr; App_VdeltaOp_ThirdCheck &rArr; App_PubOPUPChk
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_FUNC_StartUp
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_VdeltaOp_ThirdCheck
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_VdeltaOp_SecondCheck
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_VdeltaOp_FirstCheck
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MosOtp_ThirdCheck
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MosOtp_SecondCheck
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MosOtp_FirstCheck
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IdischgOcp_ThirdCheck
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IdischgOcp_SecondCheck
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IdischgOcp_FirstCheck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IchgOcp_ThirdCheck
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IchgOcp_SecondCheck
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IchgOcp_FirstCheck
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellUvp_ThirdCheck
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellUvp_SecondCheck
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellUvp_FirstCheck
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellSocUp_ThirdCheck
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellSocUp_SecondCheck
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellSocUp_FirstCheck
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellOvp_ThirdCheck
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellOvp_SecondCheck
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellOvp_FirstCheck
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDischgUtp_ThirdCheck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDischgUtp_SecondCheck
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDischgUtp_FirstCheck
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDisChgOtp_ThirdCheck
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDisChgOtp_SecondCheck
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDisChgOtp_FirstCheck
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgUtp_ThirdCheck
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgUtp_SecondCheck
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgUtp_FirstCheck
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgOtp_ThirdCheck
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgOtp_SecondCheck
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgOtp_FirstCheck
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatUvp_ThirdCheck
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatUvp_SecondCheck
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatUvp_FirstCheck
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatOvp_ThirdCheck
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatOvp_SecondCheck
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatOvp_FirstCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>BTIM1_IRQHandler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, timer.o(i.BTIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BTIM1_IRQHandler &rArr; TIM_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClrIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>Balance_Contrl</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cellbalance.o(i.Balance_Contrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Balance_Contrl &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BalanceProcess
</UL>

<P><STRONG><a name="[251]"></a>BkpRam_WriteUINT16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_cfg.o(i.BkpRam_WriteUINT16))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_FlashConnect
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32h47x_48x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>CAN_TX_0x00</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x00))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x00 &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[111]"></a>CAN_TX_0x01</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x01))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x01 &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[112]"></a>CAN_TX_0x02</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x02))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x02 &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[113]"></a>CAN_TX_0x03</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x03))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x03 &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[114]"></a>CAN_TX_0x04</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x04))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x04 &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[115]"></a>CAN_TX_0x05</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x05))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x05 &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[116]"></a>CAN_TX_0x06</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x06))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x06 &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[117]"></a>CAN_TX_0x07</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x07))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x07 &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[118]"></a>CAN_TX_0x08</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x08))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x08 &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[119]"></a>CAN_TX_0x09</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x09))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x09 &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[11a]"></a>CAN_TX_0x0A</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x0A))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x0A &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[11b]"></a>CAN_TX_0x0B</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x0B))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x0B &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[11c]"></a>CAN_TX_0x0C</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x0C))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x0C &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[11d]"></a>CAN_TX_0x0D</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x0D))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x0D &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[11e]"></a>CAN_TX_0x0E</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x0E))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x0E &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[11f]"></a>CAN_TX_0x0F</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x0F))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x0F &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[120]"></a>CAN_TX_0x10</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x10))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x10 &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[121]"></a>CAN_TX_0x11</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, can_com.o(i.CAN_TX_0x11))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_TX_0x11 &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[122]"></a>CAN_TX_0x1F0</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, can_com.o(i.CAN_TX_0x1F0))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CAN_TX_0x1F0 &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmiT_0x1F0
</UL>

<P><STRONG><a name="[12f]"></a>CAN_TX_Test</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, can_com.o(i.CAN_TX_Test))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_TransmitDeal
</UL>

<P><STRONG><a name="[110]"></a>CAN_Tx_Data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, can_com.o(i.CAN_Tx_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x1F0
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x11
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x10
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0F
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0E
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0D
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0C
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0B
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0A
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x09
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x08
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x07
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x06
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x05
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x04
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x03
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x02
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x01
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x00
</UL>

<P><STRONG><a name="[124]"></a>CBC_CtrlMOS</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, cbc.o(i.CBC_CtrlMOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CBC_CtrlMOS &rArr; System_ERROR_UserCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ERROR_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBC_MOS
</UL>

<P><STRONG><a name="[bb]"></a>CBC_MOS</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, cbc.o(i.CBC_MOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CBC_MOS &rArr; InitCBC &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCBC
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBC_CtrlMOS
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CBC
</UL>

<P><STRONG><a name="[27e]"></a>CBC_Recovery</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cbc.o(i.CBC_Recovery), UNUSED)

<P><STRONG><a name="[98]"></a>CHG_FETControl</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fetcontrol.o(i.CHG_FETControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CHG_FETControl &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHG_OnOFF
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_MosInit
</UL>

<P><STRONG><a name="[203]"></a>CHG_MOS_BootStrap_Cir</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lib_iodrivers.o(i.CHG_MOS_BootStrap_Cir))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosOnOFF_Det_BootStrap_Cir
</UL>

<P><STRONG><a name="[205]"></a>CHG_MOS_SameDoor_HavePreChg</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lib_iodrivers.o(i.CHG_MOS_SameDoor_HavePreChg))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosOnOFF_Det_SameDoor_HavePreChg
</UL>

<P><STRONG><a name="[126]"></a>CHG_OnOFF</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, short_current.o(i.CHG_OnOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CHG_OnOFF &rArr; CHG_FETControl &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHG_FETControl
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drivers_External_Ctrl
</UL>

<P><STRONG><a name="[224]"></a>CHG_Relay_DiffDoor_HavePreChg</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lib_iodrivers.o(i.CHG_Relay_DiffDoor_HavePreChg))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayOnOFF_Det_DiffDoor_HavePreChg
</UL>

<P><STRONG><a name="[127]"></a>COW_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, brokenlinedetect.o(i.COW_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = COW_enable &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_BrokenLineDetect
</UL>

<P><STRONG><a name="[de]"></a>CRC_verify</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart_upper.o(i.CRC_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CRC_verify &rArr; Sci_CRC16RTU
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI3
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI1
</UL>

<P><STRONG><a name="[128]"></a>CalcuSOC_StartUp</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lib_soc.o(i.CalcuSOC_StartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CalcuSOC_StartUp &rArr; SOC_DealEEPROM_Data &rArr; Get_OpenCircuit_Value &rArr; GetEndValuee
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_DealEEPROM_Data
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulusSubb
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_OpenCircuit_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_Update_StartUp
</UL>

<P><STRONG><a name="[123]"></a>CanSendMsg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, can.o(i.CanSendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_AddMsgToTxFifoQ
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Data
</UL>

<P><STRONG><a name="[12d]"></a>Can_BusOFF_FaultChk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can_com.o(i.Can_BusOFF_FaultChk))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_BusOFF_Monitor
</UL>

<P><STRONG><a name="[12e]"></a>Can_BusOFF_FaultTimeCtrl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can_com.o(i.Can_BusOFF_FaultTimeCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_BusOFF_Monitor
</UL>

<P><STRONG><a name="[bd]"></a>Can_BusOFF_Monitor</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, can_com.o(i.Can_BusOFF_Monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Can_BusOFF_Monitor
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_BusOFF_FaultTimeCtrl
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_BusOFF_FaultChk
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CanCom
</UL>

<P><STRONG><a name="[27f]"></a>Can_BusOFF_Recover</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can_com.o(i.Can_BusOFF_Recover), UNUSED)

<P><STRONG><a name="[be]"></a>Can_ReceiveDeal</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, can_com.o(i.Can_ReceiveDeal))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CanCom
</UL>

<P><STRONG><a name="[c0]"></a>Can_TransmiT_0x1F0</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, can_com.o(i.Can_TransmiT_0x1F0))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Can_TransmiT_0x1F0 &rArr; CAN_TX_0x1F0 &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x1F0
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CanCom
</UL>

<P><STRONG><a name="[bf]"></a>Can_TransmitDeal</STRONG> (Thumb, 354 bytes, Stack size 0 bytes, can_com.o(i.Can_TransmitDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Can_TransmitDeal &rArr; CAN_TX_0x11 &rArr; CAN_Tx_Data &rArr; CanSendMsg &rArr; FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_Test
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x11
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x10
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0F
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0E
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0D
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0C
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0B
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0A
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x09
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x08
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x07
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x06
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x05
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x04
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x03
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x02
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x01
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x00
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CanCom
</UL>

<P><STRONG><a name="[105]"></a>CleanError</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, jiche_app.o(i.CleanError))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CleanError &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ShortCurDeal_AFE
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_InitFun
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection_Config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drivers_External_Ctrl
</UL>

<P><STRONG><a name="[e9]"></a>Cool_Control</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, heat_cool.o(i.Cool_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Cool_Control &rArr; System_FUNC_StartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_FUNC_StartUp
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cool_StartUp_SelfCheck
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cool_OnOFF_Err_RecoverDeal
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cool_OnOFF_Det_Normal
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cool_OnOFF_Det_Err
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cool_OnOFF_CONT
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Heat_Cool_Ctrl
</UL>

<P><STRONG><a name="[132]"></a>Cool_OnOFF_CONT</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, heat_cool.o(i.Cool_OnOFF_CONT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cool_OnOFF_CONT
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cool_Control
</UL>

<P><STRONG><a name="[133]"></a>Cool_OnOFF_Det_Err</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heat_cool.o(i.Cool_OnOFF_Det_Err))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cool_Control
</UL>

<P><STRONG><a name="[131]"></a>Cool_OnOFF_Det_Normal</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, heat_cool.o(i.Cool_OnOFF_Det_Normal))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cool_Control
</UL>

<P><STRONG><a name="[134]"></a>Cool_OnOFF_Err_RecoverDeal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heat_cool.o(i.Cool_OnOFF_Err_RecoverDeal))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cool_Control
</UL>

<P><STRONG><a name="[130]"></a>Cool_StartUp_SelfCheck</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, heat_cool.o(i.Cool_StartUp_SelfCheck))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cool_Control
</UL>

<P><STRONG><a name="[13a]"></a>CorrectionTerminal_CC</STRONG> (Thumb, 610 bytes, Stack size 0 bytes, lib_soc.o(i.CorrectionTerminal_CC))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction_Terminal
</UL>

<P><STRONG><a name="[139]"></a>CorrectionTerminal_CV</STRONG> (Thumb, 802 bytes, Stack size 0 bytes, lib_soc.o(i.CorrectionTerminal_CV))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction_Terminal
</UL>

<P><STRONG><a name="[135]"></a>Correction_CapacityFull</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, lib_soc.o(i.Correction_CapacityFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Correction_CapacityFull &rArr; Correction_CapacityFull_CycleCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction_CapacityFull_CycleCnt
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction_CapacityFull_ChgDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_IntEnhance_Ctrl
</UL>

<P><STRONG><a name="[136]"></a>Correction_CapacityFull_ChgDeal</STRONG> (Thumb, 408 bytes, Stack size 0 bytes, lib_soc.o(i.Correction_CapacityFull_ChgDeal))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction_CapacityFull
</UL>

<P><STRONG><a name="[137]"></a>Correction_CapacityFull_CycleCnt</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, lib_soc.o(i.Correction_CapacityFull_CycleCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Correction_CapacityFull_CycleCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction_CapacityFull
</UL>

<P><STRONG><a name="[138]"></a>Correction_Terminal</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, lib_soc.o(i.Correction_Terminal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Correction_Terminal
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorrectionTerminal_CV
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorrectionTerminal_CC
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_Cont_AH_Int_DSG
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_Cont_AH_Int_CHG
</UL>

<P><STRONG><a name="[19f]"></a>DMA_DeInit</STRONG> (Thumb, 376 bytes, Stack size 0 bytes, n32h47x_48x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_DMA
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_DMA
</UL>

<P><STRONG><a name="[1a2]"></a>DMA_EnableChannel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32h47x_48x_dma.o(i.DMA_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_DMA
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_DMA
</UL>

<P><STRONG><a name="[1a0]"></a>DMA_Init</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, n32h47x_48x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_DMA
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_DMA
</UL>

<P><STRONG><a name="[1a1]"></a>DMA_RequestRemap</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32h47x_48x_dma.o(i.DMA_RequestRemap))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_DMA
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_DMA
</UL>

<P><STRONG><a name="[96]"></a>DPC_Config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fetcontrol.o(i.DPC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DPC_Config &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_MosInit
</UL>

<P><STRONG><a name="[94]"></a>DSGM_Control</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fetcontrol.o(i.DSGM_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DSGM_Control &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_MosInit
</UL>

<P><STRONG><a name="[99]"></a>DSG_FETControl</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fetcontrol.o(i.DSG_FETControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DSG_FETControl &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSG_OnOFF
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_MosInit
</UL>

<P><STRONG><a name="[204]"></a>DSG_MOS_BootStrap_Cir</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lib_iodrivers.o(i.DSG_MOS_BootStrap_Cir))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosOnOFF_Det_BootStrap_Cir
</UL>

<P><STRONG><a name="[206]"></a>DSG_MOS_SameDoor_HavePreChg</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lib_iodrivers.o(i.DSG_MOS_SameDoor_HavePreChg))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosOnOFF_Det_SameDoor_HavePreChg
</UL>

<P><STRONG><a name="[13b]"></a>DSG_OnOFF</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, short_current.o(i.DSG_OnOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DSG_OnOFF &rArr; DSG_FETControl &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSG_FETControl
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drivers_External_Ctrl
</UL>

<P><STRONG><a name="[225]"></a>DSG_Relay_DiffDoor_HavePreChg</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lib_iodrivers.o(i.DSG_Relay_DiffDoor_HavePreChg))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayOnOFF_Det_DiffDoor_HavePreChg
</UL>

<P><STRONG><a name="[13c]"></a>DVC11XX_Calc_BatTemp</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, temperature.o(i.DVC11XX_Calc_BatTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DVC11XX_Calc_BatTemp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Temperature
</UL>

<P><STRONG><a name="[13d]"></a>DVC11XX_Calc_ChipTemp</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, temperature.o(i.DVC11XX_Calc_ChipTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DVC11XX_Calc_ChipTemp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Temperature
</UL>

<P><STRONG><a name="[20c]"></a>DVC11XX_Calc_CurrentWithCC1</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, current.o(i.DVC11XX_Calc_CurrentWithCC1))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Current
</UL>

<P><STRONG><a name="[13e]"></a>DVC11XX_Calc_CurrentWithCC2</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, current.o(i.DVC11XX_Calc_CurrentWithCC2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DVC11XX_Calc_CurrentWithCC2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Current
</UL>

<P><STRONG><a name="[140]"></a>DVC11XX_Calc_V1P8</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, voltage.o(i.DVC11XX_Calc_V1P8))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DVC11XX_Calc_V1P8 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Voltage_other
</UL>

<P><STRONG><a name="[141]"></a>DVC11XX_Calc_VBAT</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, voltage.o(i.DVC11XX_Calc_VBAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DVC11XX_Calc_VBAT &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Voltage_other
</UL>

<P><STRONG><a name="[142]"></a>DVC11XX_Calc_VCell</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, voltage.o(i.DVC11XX_Calc_VCell))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DVC11XX_Calc_VCell &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellVolSecondaryCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Voltage_Vcell
</UL>

<P><STRONG><a name="[144]"></a>DVC11XX_Calc_VLOAD</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, voltage.o(i.DVC11XX_Calc_VLOAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DVC11XX_Calc_VLOAD &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Voltage_other
</UL>

<P><STRONG><a name="[145]"></a>DVC11XX_Calc_VPACK</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, voltage.o(i.DVC11XX_Calc_VPACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DVC11XX_Calc_VPACK &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Voltage_other
</UL>

<P><STRONG><a name="[148]"></a>DVC11XX_ReadRegs</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dvc11xx.o(i.DVC11XX_ReadRegs))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DVC11XX_ReadRegs &rArr; IIC_ReadDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadDataWithCRC
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NFRT
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Voltage_other
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Voltage_Vcell
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Temperature
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_FETControl
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Current
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_ChargerDetect
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_CellBalance
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_BrokenLineDetect
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_AlertInterruptMask
</UL>

<P><STRONG><a name="[93]"></a>DVC11XX_WriteRegs</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dvc11xx.o(i.DVC11XX_WriteRegs))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteDataWithCRC
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_Contrl
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_InitRegs
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP6_ModeConfig
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP5_ModeConfig
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP4_ModeConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP3_ModeConfig
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP2_ModeConfig
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP1_ModeConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FET_Open
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COW_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UV_Config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_Config
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDSG_FETControl
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV_Config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCD2_Config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCD1_Config
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCC2_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCC1_Config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSFM_Control
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSG_FETControl
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSGM_Control
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPC_Config
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanError
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHG_FETControl
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_MosInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_RST
</UL>

<P><STRONG><a name="[aa]"></a>DataLoad_CellVolt</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, data_deal.o(i.DataLoad_CellVolt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DataLoad_CellVolt &rArr; System_ERROR_UserCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ERROR_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AFE_DataDeal
</UL>

<P><STRONG><a name="[ab]"></a>DataLoad_CellVoltMaxMinFind</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, data_deal.o(i.DataLoad_CellVoltMaxMinFind))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DataLoad_CellVoltMaxMinFind
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AFE_DataDeal
</UL>

<P><STRONG><a name="[ad]"></a>DataLoad_Current</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, data_deal.o(i.DataLoad_Current))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AFE_DataDeal
</UL>

<P><STRONG><a name="[ac]"></a>DataLoad_TemperatureMaxMinFind</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, data_deal.o(i.DataLoad_TemperatureMaxMinFind))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DataLoad_TemperatureMaxMinFind
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AFE_DataDeal
</UL>

<P><STRONG><a name="[ae]"></a>DataLoad_Test</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, data_deal.o(i.DataLoad_Test))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AFE_DataDeal
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32h47x_48x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[14c]"></a>DriversOnOFF</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, lib_iodrivers.o(i.DriversOnOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DriversOnOFF
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl_SameDoor_NoPreChg
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl_SameDoor_HavePreChg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl_DiffDoor_NoPreChg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl_DiffDoor_HavePreChg
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosCtrl_SameDoor_NoPreChg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosCtrl_SameDoor_HavePreChg
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosCtrl_BootStrap_Cir
</UL>

<P><STRONG><a name="[f6]"></a>Drivers_Ctrl</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lib_iodrivers.o(i.Drivers_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Drivers_Ctrl &rArr; RelayCtrl_SameDoor_NoPreChg &rArr; DriversOnOFF
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl_SameDoor_NoPreChg
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl_SameDoor_HavePreChg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl_DiffDoor_NoPreChg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl_DiffDoor_HavePreChg
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosCtrl_SameDoor_NoPreChg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosCtrl_SameDoor_HavePreChg
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosCtrl_BootStrap_Cir
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MOS_Relay_Ctrl
</UL>

<P><STRONG><a name="[f5]"></a>Drivers_External_Ctrl</STRONG> (Thumb, 626 bytes, Stack size 40 bytes, drivers_ctrl.o(i.Drivers_External_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Drivers_External_Ctrl &rArr; CleanError &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ERROR_UserCallback
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanError
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCHG_OnOFF
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSG_OnOFF
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHG_OnOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MOS_Relay_Ctrl
</UL>

<P><STRONG><a name="[f1]"></a>Drivers_PreCHG</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, drivers_ctrl.o(i.Drivers_PreCHG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Drivers_PreCHG
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MOS_Relay_Ctrl
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, n32h47x_48x_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, n32h47x_48x_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, n32h47x_48x_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, n32h47x_48x_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32h47x_48x_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[158]"></a>EXTI_ClrITPendBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32h47x_48x_exti.o(i.EXTI_ClrITPendBit))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>EXTI_GetITStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, n32h47x_48x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[1bc]"></a>EXTI_InitPeripheral</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, n32h47x_48x_exti.o(i.EXTI_InitPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCBC
</UL>

<P><STRONG><a name="[4a]"></a>FDCAN3_INT0_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, n32h47x_48x_it.o(i.FDCAN3_INT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FDCAN3_INT0_IRQHandler &rArr; FDCAN_GetRxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_GetRxMsg
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_GetIntFlag
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[15c]"></a>FDCAN_ActivateInt</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, n32h47x_48x_fdcan.o(i.FDCAN_ActivateInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FDCAN_ActivateInt
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1
</UL>

<P><STRONG><a name="[12c]"></a>FDCAN_AddMsgToTxFifoQ</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, n32h47x_48x_fdcan.o(i.FDCAN_AddMsgToTxFifoQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FDCAN_AddMsgToTxFifoQ &rArr; FDCAN_CopyMsgToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_CopyMsgToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendMsg
</UL>

<P><STRONG><a name="[15a]"></a>FDCAN_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32h47x_48x_fdcan.o(i.FDCAN_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN3_INT0_IRQHandler
</UL>

<P><STRONG><a name="[1e1]"></a>FDCAN_ConfigFilter</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, n32h47x_48x_fdcan.o(i.FDCAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FDCAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1_Filter
</UL>

<P><STRONG><a name="[1dc]"></a>FDCAN_ConfigGlobalFilter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, n32h47x_48x_fdcan.o(i.FDCAN_ConfigGlobalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FDCAN_ConfigGlobalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1
</UL>

<P><STRONG><a name="[1df]"></a>FDCAN_ConfigIntLine</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32h47x_48x_fdcan.o(i.FDCAN_ConfigIntLine))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1
</UL>

<P><STRONG><a name="[1dd]"></a>FDCAN_ConfigTSPrescaler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32h47x_48x_fdcan.o(i.FDCAN_ConfigTSPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1
</UL>

<P><STRONG><a name="[1de]"></a>FDCAN_Config_TS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32h47x_48x_fdcan.o(i.FDCAN_Config_TS))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1
</UL>

<P><STRONG><a name="[15d]"></a>FDCAN_EnableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32h47x_48x_fdcan.o(i.FDCAN_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_ActivateInt
</UL>

<P><STRONG><a name="[159]"></a>FDCAN_GetIntFlag</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32h47x_48x_fdcan.o(i.FDCAN_GetIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN3_INT0_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>FDCAN_GetRxMsg</STRONG> (Thumb, 384 bytes, Stack size 20 bytes, n32h47x_48x_fdcan.o(i.FDCAN_GetRxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FDCAN_GetRxMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN3_INT0_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>FDCAN_Init</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, n32h47x_48x_fdcan.o(i.FDCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FDCAN_Init &rArr; FDCAN_InitMsgRam
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_InitMsgRam
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1_Mode
</UL>

<P><STRONG><a name="[1e0]"></a>FDCAN_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32h47x_48x_fdcan.o(i.FDCAN_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1
</UL>

<P><STRONG><a name="[162]"></a>FET_Open</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpn.o(i.FET_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = FET_Open &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPn_ModeConfig
</UL>

<P><STRONG><a name="[164]"></a>FLASH_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32h47x_48x_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramdoubleWord
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOnePage
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite_DoubleWord_NoErase
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase_OnePage
</UL>

<P><STRONG><a name="[163]"></a>FLASH_EraseOnePage</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, n32h47x_48x_flash.o(i.FLASH_EraseOnePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_EraseOnePage &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase_OnePage
</UL>

<P><STRONG><a name="[167]"></a>FLASH_GetSTS</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, n32h47x_48x_flash.o(i.FLASH_GetSTS))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
</UL>

<P><STRONG><a name="[16a]"></a>FLASH_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32h47x_48x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite_DoubleWord_NoErase
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase_OnePage
</UL>

<P><STRONG><a name="[166]"></a>FLASH_ProgramdoubleWord</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, n32h47x_48x_flash.o(i.FLASH_ProgramdoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramdoubleWord &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite_DoubleWord_NoErase
</UL>

<P><STRONG><a name="[169]"></a>FLASH_Unlock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, n32h47x_48x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite_DoubleWord_NoErase
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase_OnePage
</UL>

<P><STRONG><a name="[165]"></a>FLASH_WaitForLastOpt</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, n32h47x_48x_flash.o(i.FLASH_WaitForLastOpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetSTS
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramdoubleWord
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOnePage
</UL>

<P><STRONG><a name="[b3]"></a>FaultWarnRecord</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, fault.o(i.FaultWarnRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FaultWarnRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_VdeltaOp_ThirdCheck
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_VdeltaOp_SecondCheck
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_VdeltaOp_FirstCheck
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MosOtp_ThirdCheck
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MosOtp_SecondCheck
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MosOtp_FirstCheck
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IdischgOcp_ThirdCheck
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IdischgOcp_SecondCheck
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IdischgOcp_FirstCheck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IchgOcp_ThirdCheck
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IchgOcp_SecondCheck
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IchgOcp_FirstCheck
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellUvp_ThirdCheck
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellUvp_SecondCheck
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellUvp_FirstCheck
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellSocUp_ThirdCheck
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellSocUp_SecondCheck
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellSocUp_FirstCheck
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellOvp_ThirdCheck
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellOvp_SecondCheck
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellOvp_FirstCheck
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDischgUtp_ThirdCheck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDischgUtp_SecondCheck
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDischgUtp_FirstCheck
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDisChgOtp_ThirdCheck
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDisChgOtp_SecondCheck
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDisChgOtp_FirstCheck
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgUtp_ThirdCheck
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgUtp_SecondCheck
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgUtp_FirstCheck
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgOtp_ThirdCheck
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgOtp_SecondCheck
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgOtp_FirstCheck
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatUvp_ThirdCheck
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatUvp_SecondCheck
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatUvp_FirstCheck
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatOvp_ThirdCheck
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatOvp_SecondCheck
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatOvp_FirstCheck
</UL>

<P><STRONG><a name="[b4]"></a>FaultWarnRecord2</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, fault.o(i.FaultWarnRecord2))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_VdeltaOp_ThirdCheck
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_VdeltaOp_SecondCheck
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_VdeltaOp_FirstCheck
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MosOtp_ThirdCheck
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MosOtp_SecondCheck
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MosOtp_FirstCheck
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IdischgOcp_ThirdCheck
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IdischgOcp_SecondCheck
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IdischgOcp_FirstCheck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IchgOcp_ThirdCheck
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IchgOcp_SecondCheck
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IchgOcp_FirstCheck
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellUvp_ThirdCheck
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellUvp_SecondCheck
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellUvp_FirstCheck
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellSocUp_ThirdCheck
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellSocUp_SecondCheck
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellSocUp_FirstCheck
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellOvp_ThirdCheck
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellOvp_SecondCheck
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellOvp_FirstCheck
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDischgUtp_ThirdCheck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDischgUtp_SecondCheck
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDischgUtp_FirstCheck
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDisChgOtp_ThirdCheck
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDisChgOtp_SecondCheck
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellDisChgOtp_FirstCheck
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgUtp_ThirdCheck
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgUtp_SecondCheck
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgUtp_FirstCheck
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgOtp_ThirdCheck
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgOtp_SecondCheck
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CellChgOtp_FirstCheck
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatUvp_ThirdCheck
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatUvp_SecondCheck
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatUvp_FirstCheck
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatOvp_ThirdCheck
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatOvp_SecondCheck
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BatOvp_FirstCheck
</UL>

<P><STRONG><a name="[218]"></a>FlashErase_AllRegion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, parameter_save_flash.o(i.FlashErase_AllRegion))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_WriteAll_DataRefresh
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_WriteAll_DataDefault
</UL>

<P><STRONG><a name="[168]"></a>FlashErase_OnePage</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, flash.o(i.FlashErase_OnePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FlashErase_OnePage &rArr; FLASH_EraseOnePage &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOnePage
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtimeSOC_PageErase
</UL>

<P><STRONG><a name="[16c]"></a>FlashRead_OneHalfWord</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash.o(i.FlashRead_OneHalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead_u16Array
</UL>

<P><STRONG><a name="[269]"></a>FlashRead_OneWord</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash.o(i.FlashRead_OneWord))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtimeSOC_Read_UINT32
</UL>

<P><STRONG><a name="[16b]"></a>FlashRead_u16Array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, parameter_save_flash.o(i.FlashRead_u16Array))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead_OneHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_GetAll_StoreData
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPara_Flash
</UL>

<P><STRONG><a name="[16f]"></a>FlashWrite_2Word_NoErase</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, parameter_save_flash.o(i.FlashWrite_2Word_NoErase))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite_u16Array_NoErase
</UL>

<P><STRONG><a name="[16d]"></a>FlashWrite_DoubleWord_NoErase</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, flash.o(i.FlashWrite_DoubleWord_NoErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FlashWrite_DoubleWord_NoErase &rArr; FLASH_ProgramdoubleWord &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramdoubleWord
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtimeSOC_Write_2Word
</UL>

<P><STRONG><a name="[16e]"></a>FlashWrite_u16Array_NoErase</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, parameter_save_flash.o(i.FlashWrite_u16Array_NoErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FlashWrite_u16Array_NoErase
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite_2Word_NoErase
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_WriteAllCycle
</UL>

<P><STRONG><a name="[170]"></a>GP1_ModeConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpn.o(i.GP1_ModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GP1_ModeConfig &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPn_ModeConfig
</UL>

<P><STRONG><a name="[171]"></a>GP2_ModeConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpn.o(i.GP2_ModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GP2_ModeConfig &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPn_ModeConfig
</UL>

<P><STRONG><a name="[172]"></a>GP3_ModeConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpn.o(i.GP3_ModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GP3_ModeConfig &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPn_ModeConfig
</UL>

<P><STRONG><a name="[173]"></a>GP4_ModeConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpn.o(i.GP4_ModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GP4_ModeConfig &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPn_ModeConfig
</UL>

<P><STRONG><a name="[174]"></a>GP5_ModeConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpn.o(i.GP5_ModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GP5_ModeConfig &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPn_ModeConfig
</UL>

<P><STRONG><a name="[175]"></a>GP6_ModeConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpn.o(i.GP6_ModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GP6_ModeConfig &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPn_ModeConfig
</UL>

<P><STRONG><a name="[1be]"></a>GPIO_ConfigEXTILine</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, n32h47x_48x_gpio.o(i.GPIO_ConfigEXTILine))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_ConfigEXTILine
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCBC
</UL>

<P><STRONG><a name="[1d6]"></a>GPIO_ConfigPinRemap</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, n32h47x_48x_gpio.o(i.GPIO_ConfigPinRemap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ConfigPinRemap
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIO
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrivers_GPIO
</UL>

<P><STRONG><a name="[1a4]"></a>GPIO_InitPeripheral</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, n32h47x_48x_gpio.o(i.GPIO_InitPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper3
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper1
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIO
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrivers_GPIO
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_GPIO
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_GPIO
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM_OUT
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1_GPIO
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCBC
</UL>

<P><STRONG><a name="[1a3]"></a>GPIO_InitStruct</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32h47x_48x_gpio.o(i.GPIO_InitStruct))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_GPIO
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_GPIO
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM_OUT
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
</UL>

<P><STRONG><a name="[202]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32h47x_48x_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayOnOFF_Det_SameDoor_HavePreChg
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl_SameDoor_NoPreChg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosOnOFF_Det_BootStrap_Cir
</UL>

<P><STRONG><a name="[14e]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32h47x_48x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrivers_GPIO
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriversOnOFF
</UL>

<P><STRONG><a name="[14d]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32h47x_48x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriversOnOFF
</UL>

<P><STRONG><a name="[176]"></a>GPn_ModeConfig</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, jiche_app.o(i.GPn_ModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GPn_ModeConfig &rArr; GP6_ModeConfig &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP6_ModeConfig
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP5_ModeConfig
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP4_ModeConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP3_ModeConfig
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP2_ModeConfig
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP1_ModeConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FET_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_InitFun
</UL>

<P><STRONG><a name="[f4]"></a>GetData_Drivers</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drivers_ctrl.o(i.GetData_Drivers))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MOS_Relay_Ctrl
</UL>

<P><STRONG><a name="[100]"></a>GetData_SOC</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, soc_user.o(i.GetData_SOC))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SOC
</UL>

<P><STRONG><a name="[91]"></a>GetEndValue</STRONG> (Thumb, 210 bytes, Stack size 36 bytes, pub_func.o(i.GetEndValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetEndValue
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TTC
</UL>

<P><STRONG><a name="[177]"></a>GetEndValuee</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, lib_soc.o(i.GetEndValuee))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetEndValuee
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_OpenCircuit_Value
</UL>

<P><STRONG><a name="[12b]"></a>Get_OpenCircuit_Value</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, lib_soc.o(i.Get_OpenCircuit_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Get_OpenCircuit_Value &rArr; GetEndValuee
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEndValuee
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_Update_StartUp
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_DealEEPROM_Data
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSOC_StartUp
</UL>

<P><STRONG><a name="[95]"></a>HSFM_Control</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fetcontrol.o(i.HSFM_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HSFM_Control &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_MosInit
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32h47x_48x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>Heat_Control</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, heat_cool.o(i.Heat_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Heat_Control &rArr; System_FUNC_StartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_FUNC_StartUp
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_StartUp_SelfCheck
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_OnOFF_Err_RecoverDeal
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_OnOFF_Det_Normal
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_OnOFF_Det_Err
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_OnOFF_CONT
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Heat_Cool_Ctrl
</UL>

<P><STRONG><a name="[17a]"></a>Heat_OnOFF_CONT</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, heat_cool.o(i.Heat_OnOFF_CONT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Heat_OnOFF_CONT
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_Control
</UL>

<P><STRONG><a name="[17b]"></a>Heat_OnOFF_Det_Err</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heat_cool.o(i.Heat_OnOFF_Det_Err))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_Control
</UL>

<P><STRONG><a name="[179]"></a>Heat_OnOFF_Det_Normal</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, heat_cool.o(i.Heat_OnOFF_Det_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Heat_OnOFF_Det_Normal
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_Control
</UL>

<P><STRONG><a name="[17c]"></a>Heat_OnOFF_Err_RecoverDeal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, heat_cool.o(i.Heat_OnOFF_Err_RecoverDeal))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_Control
</UL>

<P><STRONG><a name="[178]"></a>Heat_StartUp_SelfCheck</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, heat_cool.o(i.Heat_StartUp_SelfCheck))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_Control
</UL>

<P><STRONG><a name="[190]"></a>I2C_CheckEvent</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32h47x_48x_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_TransferDataRaw
</UL>

<P><STRONG><a name="[194]"></a>I2C_ConfigAck</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32h47x_48x_i2c.o(i.I2C_ConfigAck))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_TransferDataRaw
</UL>

<P><STRONG><a name="[180]"></a>I2C_DeInit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, n32h47x_48x_i2c.o(i.I2C_DeInit))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_TransferDataRaw
</UL>

<P><STRONG><a name="[17f]"></a>I2C_Enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32h47x_48x_i2c.o(i.I2C_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configure
</UL>

<P><STRONG><a name="[18f]"></a>I2C_GenerateStart</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32h47x_48x_i2c.o(i.I2C_GenerateStart))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_TransferDataRaw
</UL>

<P><STRONG><a name="[192]"></a>I2C_GenerateStop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32h47x_48x_i2c.o(i.I2C_GenerateStop))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_TransferDataRaw
</UL>

<P><STRONG><a name="[18e]"></a>I2C_GetFlag</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, n32h47x_48x_i2c.o(i.I2C_GetFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_TransferDataRaw
</UL>

<P><STRONG><a name="[17e]"></a>I2C_Init</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, n32h47x_48x_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configure
</UL>

<P><STRONG><a name="[264]"></a>I2C_InitStruct</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32h47x_48x_i2c.o(i.I2C_InitStruct))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
</UL>

<P><STRONG><a name="[195]"></a>I2C_RecvData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32h47x_48x_i2c.o(i.I2C_RecvData))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_TransferDataRaw
</UL>

<P><STRONG><a name="[191]"></a>I2C_SendAddr7bit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32h47x_48x_i2c.o(i.I2C_SendAddr7bit))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_TransferDataRaw
</UL>

<P><STRONG><a name="[193]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32h47x_48x_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_TransferDataRaw
</UL>

<P><STRONG><a name="[183]"></a>IIC_Ack_SEE</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, eeprom.o(i.IIC_Ack_SEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIC_Ack_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte_SEE
</UL>

<P><STRONG><a name="[185]"></a>IIC_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = IIC_Init &rArr; i2c_master_init &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_InitFun
</UL>

<P><STRONG><a name="[187]"></a>IIC_NAck_SEE</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, eeprom.o(i.IIC_NAck_SEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIC_NAck_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte_SEE
</UL>

<P><STRONG><a name="[149]"></a>IIC_ReadDataWithCRC</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, dvc11xx.o(i.IIC_ReadDataWithCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = IIC_ReadDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_TransferDataRaw
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_ReadRegs
</UL>

<P><STRONG><a name="[18a]"></a>IIC_Read_Byte_SEE</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, eeprom.o(i.IIC_Read_Byte_SEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IIC_Read_Byte_SEE &rArr; IIC_NAck_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_us
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck_SEE
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack_SEE
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEPROM_Byte
</UL>

<P><STRONG><a name="[18b]"></a>IIC_Send_Byte_SEE</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, eeprom.o(i.IIC_Send_Byte_SEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IIC_Send_Byte_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEPROM_Byte
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEPROM_Byte
</UL>

<P><STRONG><a name="[18c]"></a>IIC_Start_SEE</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, eeprom.o(i.IIC_Start_SEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIC_Start_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEPROM_Byte
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEPROM_Byte
</UL>

<P><STRONG><a name="[18d]"></a>IIC_Stop_SEE</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, eeprom.o(i.IIC_Stop_SEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIC_Stop_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEPROM_Byte
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEPROM_Byte
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack_SEE
</UL>

<P><STRONG><a name="[188]"></a>IIC_TransferDataRaw</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, i2c.o(i.IIC_TransferDataRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendAddr7bit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecvData
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlag
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStop
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStart
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConfigAck
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteDataWithCRC
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadDataWithCRC
</UL>

<P><STRONG><a name="[196]"></a>IIC_Wait_Ack_SEE</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, eeprom.o(i.IIC_Wait_Ack_SEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IIC_Wait_Ack_SEE &rArr; IIC_Stop_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_us
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop_SEE
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEPROM_Byte
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEPROM_Byte
</UL>

<P><STRONG><a name="[14b]"></a>IIC_WriteDataWithCRC</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, dvc11xx.o(i.IIC_WriteDataWithCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_TransferDataRaw
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>

<P><STRONG><a name="[21f]"></a>IWDG_ReloadKey</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32h47x_48x_iwdg.o(i.IWDG_ReloadKey))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEPROM_Byte
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEPROM_Byte
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[197]"></a>InitADC</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adc_deal.o(i.InitADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = InitADC &rArr; InitADC2 &rArr; InitADC2_TIMER &rArr; TIM_InitTimeBase
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[198]"></a>InitADC1</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, adc_deal.o(i.InitADC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = InitADC1 &rArr; InitADC1_TIMER &rArr; TIM_InitTimeBase
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC1
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_TIMER
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_GPIO
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[19c]"></a>InitADC1_DMA</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, adc_deal.o(i.InitADC1_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InitADC1_DMA &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RequestRemap
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1
</UL>

<P><STRONG><a name="[19a]"></a>InitADC1_GPIO</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, adc_deal.o(i.InitADC1_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitADC1_GPIO &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1
</UL>

<P><STRONG><a name="[19b]"></a>InitADC1_TIMER</STRONG> (Thumb, 108 bytes, Stack size 88 bytes, adc_deal.o(i.InitADC1_TIMER))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = InitADC1_TIMER &rArr; TIM_InitTimeBase
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimBaseStruct
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitOcStruct
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitOc4
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigOc4Preload
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigArPreload
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1
</UL>

<P><STRONG><a name="[199]"></a>InitADC2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc_deal.o(i.InitADC2))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = InitADC2 &rArr; InitADC2_TIMER &rArr; TIM_InitTimeBase
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC2
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_TIMER
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_GPIO
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[1af]"></a>InitADC2_DMA</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, adc_deal.o(i.InitADC2_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InitADC2_DMA &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RequestRemap
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2
</UL>

<P><STRONG><a name="[1ad]"></a>InitADC2_GPIO</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, adc_deal.o(i.InitADC2_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitADC2_GPIO &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2
</UL>

<P><STRONG><a name="[1ae]"></a>InitADC2_TIMER</STRONG> (Thumb, 108 bytes, Stack size 88 bytes, adc_deal.o(i.InitADC2_TIMER))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = InitADC2_TIMER &rArr; TIM_InitTimeBase
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimBaseStruct
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitOcStruct
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitOc4
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigOc4Preload
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigArPreload
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2
</UL>

<P><STRONG><a name="[19d]"></a>InitADC_ADC1</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, adc_deal.o(i.InitADC_ADC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitADC_ADC1 &rArr; ADC_ConfigRegularChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetDMATransferMode
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableAutoInjectedConv
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigRegularChannel
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigInt
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigInjectedSequencerLength
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CalibrationOperation
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHB1PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1
</UL>

<P><STRONG><a name="[1b0]"></a>InitADC_ADC2</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, adc_deal.o(i.InitADC_ADC2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitADC_ADC2 &rArr; ADC_ConfigRegularChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetDMATransferMode
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableAutoInjectedConv
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigRegularChannel
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigInt
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigInjectedSequencerLength
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CalibrationOperation
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHB1PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2
</UL>

<P><STRONG><a name="[125]"></a>InitCBC</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, cbc.o(i.InitCBC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitCBC &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_InitPeripheral
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigEXTILine
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBC_MOS
</UL>

<P><STRONG><a name="[1bf]"></a>InitCan</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, can.o(i.InitCan))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = InitCan &rArr; InitNode1 &rArr; InitNode1_Mode &rArr; FDCAN_Init &rArr; FDCAN_InitMsgRam
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode2
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CanCom
</UL>

<P><STRONG><a name="[250]"></a>InitData_Balance</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, balance.o(i.InitData_Balance))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_SystemElement
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_Balance
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_Reset_OtherCanAdd
</UL>

<P><STRONG><a name="[1c2]"></a>InitData_CommonUpper</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, uart_upper.o(i.InitData_CommonUpper))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = InitData_CommonUpper
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_Upper3
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_Upper2
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_Upper
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSci
</UL>

<P><STRONG><a name="[1d7]"></a>InitData_Drivers</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, drivers_ctrl.o(i.InitData_Drivers))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_SystemElement
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_Reset_OtherCanAdd
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMosRelay_DOx
</UL>

<P><STRONG><a name="[1ce]"></a>InitData_SOC</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, soc_user.o(i.InitData_SOC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitData_SOC
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_SocTable
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_SocElement
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_Protect
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_Reset_ProtectElement
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_Reset_OtherCanAdd
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[1d3]"></a>InitData_SleepFunc</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sleep_user.o(i.InitData_SleepFunc))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_SleepElement
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_Reset_OtherCanAdd
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[1c3]"></a>InitData_Upper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_upper.o(i.InitData_Upper))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_DataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_CommonUpper
</UL>

<P><STRONG><a name="[1c4]"></a>InitData_Upper2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_upper.o(i.InitData_Upper2))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_DataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_CommonUpper
</UL>

<P><STRONG><a name="[1c5]"></a>InitData_Upper3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_upper.o(i.InitData_Upper3))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_DataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_CommonUpper
</UL>

<P><STRONG><a name="[1c7]"></a>InitDevice</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.InitDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = InitDevice &rArr; InitPara_Flash &rArr; Para_WriteAll_DataDefault &rArr; Para_ResetData_AllToDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIO
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSys_Power
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ChargerLoad_Det
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CanCom
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSci
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMosRelay_DOx
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHeat_Cool
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_SleepFunc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_SOC
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPara_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d4]"></a>InitDrivers_GPIO</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, lib_iodrivers.o(i.InitDrivers_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitDrivers_GPIO &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigPinRemap
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHB1PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMosRelay_DOx
</UL>

<P><STRONG><a name="[1cf]"></a>InitHeat_Cool</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heat_cool.o(i.InitHeat_Cool))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[1c8]"></a>InitIO</STRONG> (Thumb, 436 bytes, Stack size 64 bytes, io_ctrl.o(i.InitIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InitIO &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigPinRemap
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHB1PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[1d0]"></a>InitMosRelay_DOx</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, drivers_ctrl.o(i.InitMosRelay_DOx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitMosRelay_DOx &rArr; InitDrivers_GPIO &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrivers_GPIO
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_Drivers
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[1c0]"></a>InitNode1</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, can.o(i.InitNode1))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = InitNode1 &rArr; InitNode1_Mode &rArr; FDCAN_Init &rArr; FDCAN_InitMsgRam
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Start
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Config_TS
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_ConfigTSPrescaler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_ConfigIntLine
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_ConfigGlobalFilter
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_ActivateInt
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1_NVIC
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1_Mode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1_GPIO
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCan
</UL>

<P><STRONG><a name="[1da]"></a>InitNode1_Filter</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, can.o(i.InitNode1_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = InitNode1_Filter &rArr; FDCAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1
</UL>

<P><STRONG><a name="[1d8]"></a>InitNode1_GPIO</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, can.o(i.InitNode1_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitNode1_GPIO &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1
</UL>

<P><STRONG><a name="[1d9]"></a>InitNode1_Mode</STRONG> (Thumb, 136 bytes, Stack size 120 bytes, can.o(i.InitNode1_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = InitNode1_Mode &rArr; FDCAN_Init &rArr; FDCAN_InitMsgRam
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphReset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigFDCANPllClk
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigFDCANClksrc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1
</UL>

<P><STRONG><a name="[1db]"></a>InitNode1_NVIC</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, can.o(i.InitNode1_NVIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitNode1_NVIC &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1
</UL>

<P><STRONG><a name="[1c1]"></a>InitNode2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can.o(i.InitNode2))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCan
</UL>

<P><STRONG><a name="[1cc]"></a>InitPWM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pwm.o(i.InitPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = InitPWM &rArr; InitPWM_OUT &rArr; TIM_InitTimeBase
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[280]"></a>InitPWM_IN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pwm.o(i.InitPWM_IN), UNUSED)

<P><STRONG><a name="[1e4]"></a>InitPWM_OUT</STRONG> (Thumb, 232 bytes, Stack size 120 bytes, pwm.o(i.InitPWM_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = InitPWM_OUT &rArr; TIM_InitTimeBase
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimBaseStruct
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitOcStruct
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitOc3
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitOc2
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigOc3Preload
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigOc2Preload
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigArPreload
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
</UL>

<P><STRONG><a name="[1ca]"></a>InitPara_Flash</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, parameter_save_flash.o(i.InitPara_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = InitPara_Flash &rArr; Para_WriteAll_DataDefault &rArr; Para_ResetData_AllToDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_WriteAll_DataDefault
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_GetAll_StoreData
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead_u16Array
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[1ea]"></a>InitSOC_IntEnhance</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, lib_soc.o(i.InitSOC_IntEnhance))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InitSOC_IntEnhance &rArr; runtimeSOC_Get_SocWord
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtimeSOC_Get_SocWord
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_IntEnhance_Ctrl
</UL>

<P><STRONG><a name="[1cd]"></a>InitSci</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sci_com.o(i.InitSci))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = InitSci &rArr; InitUART_CommonUpper3 &rArr; USART_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper3
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper1
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_CommonUpper
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[104]"></a>InitShortCur</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, short_current.o(i.InitShortCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = InitShortCur &rArr; AFE_ProtectInit &rArr; OCD2_Config &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_ProtectInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_MosInit
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ShortCurDeal_AFE
</UL>

<P><STRONG><a name="[1c9]"></a>InitSys_Power</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sys_pwr.o(i.InitSys_Power))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[1f9]"></a>InitSystemMonitorData_EEPROM</STRONG> (Thumb, 310 bytes, Stack size 0 bytes, system_monitor.o(i.InitSystemMonitorData_EEPROM))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVar
</UL>

<P><STRONG><a name="[1cb]"></a>InitTimer</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, timer.o(i.InitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = InitTimer &rArr; TIM_InitTimeBase
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimBaseStruct
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[1ec]"></a>InitUART_CommonUpper1</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, uart.o(i.InitUART_CommonUpper1))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = InitUART_CommonUpper1 &rArr; USART_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DriverPolaritySet
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DriverModeSet
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_CfgDriverdeassertTime
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_CfgDriverAssertTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSci
</UL>

<P><STRONG><a name="[1ed]"></a>InitUART_CommonUpper2</STRONG> (Thumb, 160 bytes, Stack size 72 bytes, uart.o(i.InitUART_CommonUpper2))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = InitUART_CommonUpper2 &rArr; USART_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSci
</UL>

<P><STRONG><a name="[1ee]"></a>InitUART_CommonUpper3</STRONG> (Thumb, 160 bytes, Stack size 72 bytes, uart.o(i.InitUART_CommonUpper3))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = InitUART_CommonUpper3 &rArr; USART_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSci
</UL>

<P><STRONG><a name="[1f8]"></a>InitVar</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.InitVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitVar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemMonitorData_EEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d2]"></a>Init_CanCom</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, can_com.o(i.Init_CanCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Init_CanCom &rArr; InitCan &rArr; InitNode1 &rArr; InitNode1_Mode &rArr; FDCAN_Init &rArr; FDCAN_InitMsgRam
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCan
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[1d1]"></a>Init_ChargerLoad_Det</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, charger_loader_func.o(i.Init_ChargerLoad_Det))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[259]"></a>JiCheChangeMainStep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jiche_app.o(i.JiCheChangeMainStep))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_MainFun
</UL>

<P><STRONG><a name="[1fb]"></a>JiCheChangeRunStep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jiche_app.o(i.JiCheChangeRunStep))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_InitFun
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_APP
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JiChe_FaultDispose
</UL>

<P><STRONG><a name="[1fa]"></a>JiChe_FaultDispose</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, jiche_app.o(i.JiChe_FaultDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JiChe_FaultDispose
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JiCheChangeRunStep
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_APP
</UL>

<P><STRONG><a name="[1fe]"></a>MainDsgMOS_OPEN_MODE_BootStrap_Cir</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, lib_iodrivers.o(i.MainDsgMOS_OPEN_MODE_BootStrap_Cir))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosCtrl_BootStrap_Cir
</UL>

<P><STRONG><a name="[201]"></a>MainDsgMOS_OPEN_MODE_SameDoor_HavePreChg</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, lib_iodrivers.o(i.MainDsgMOS_OPEN_MODE_SameDoor_HavePreChg))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosCtrl_SameDoor_HavePreChg
</UL>

<P><STRONG><a name="[221]"></a>MainRelay_OPEN_MODE_DiffDoor_HavePreChg</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, lib_iodrivers.o(i.MainRelay_OPEN_MODE_DiffDoor_HavePreChg))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl_DiffDoor_HavePreChg
</UL>

<P><STRONG><a name="[223]"></a>MainRelay_OPEN_MODE_SameDoor_HavePreChg</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, lib_iodrivers.o(i.MainRelay_OPEN_MODE_SameDoor_HavePreChg))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl_SameDoor_HavePreChg
</UL>

<P><STRONG><a name="[226]"></a>Main_Relay_SameDoor_HavePreChg</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lib_iodrivers.o(i.Main_Relay_SameDoor_HavePreChg))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayOnOFF_Det_SameDoor_HavePreChg
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32h47x_48x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>ModulusSubb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib_soc.o(i.ModulusSubb))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_Data_Filter
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSOC_StartUp
</UL>

<P><STRONG><a name="[155]"></a>MosCtrl_BootStrap_Cir</STRONG> (Thumb, 360 bytes, Stack size 8 bytes, lib_iodrivers.o(i.MosCtrl_BootStrap_Cir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MosCtrl_BootStrap_Cir &rArr; DriversOnOFF
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreDsgMOS_OPEN_MODE_BootStrap_Cir
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosOnOFF_Det_BootStrap_Cir
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainDsgMOS_OPEN_MODE_BootStrap_Cir
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriversOnOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drivers_Ctrl
</UL>

<P><STRONG><a name="[154]"></a>MosCtrl_SameDoor_HavePreChg</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, lib_iodrivers.o(i.MosCtrl_SameDoor_HavePreChg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MosCtrl_SameDoor_HavePreChg &rArr; DriversOnOFF
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreDsgMOS_OPEN_MODE_SameDoor_HavePreChg
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosOnOFF_Det_SameDoor_HavePreChg
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainDsgMOS_OPEN_MODE_SameDoor_HavePreChg
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriversOnOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drivers_Ctrl
</UL>

<P><STRONG><a name="[153]"></a>MosCtrl_SameDoor_NoPreChg</STRONG> (Thumb, 874 bytes, Stack size 16 bytes, lib_iodrivers.o(i.MosCtrl_SameDoor_NoPreChg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MosCtrl_SameDoor_NoPreChg &rArr; DriversOnOFF
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriversOnOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drivers_Ctrl
</UL>

<P><STRONG><a name="[1fc]"></a>MosOnOFF_Det_BootStrap_Cir</STRONG> (Thumb, 1108 bytes, Stack size 8 bytes, lib_iodrivers.o(i.MosOnOFF_Det_BootStrap_Cir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MosOnOFF_Det_BootStrap_Cir
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSG_MOS_BootStrap_Cir
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHG_MOS_BootStrap_Cir
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosCtrl_BootStrap_Cir
</UL>

<P><STRONG><a name="[1ff]"></a>MosOnOFF_Det_SameDoor_HavePreChg</STRONG> (Thumb, 810 bytes, Stack size 8 bytes, lib_iodrivers.o(i.MosOnOFF_Det_SameDoor_HavePreChg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MosOnOFF_Det_SameDoor_HavePreChg
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSG_MOS_SameDoor_HavePreChg
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHG_MOS_SameDoor_HavePreChg
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosCtrl_SameDoor_HavePreChg
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32h47x_48x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[1bd]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper3
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper1
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1_NVIC
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCBC
</UL>

<P><STRONG><a name="[1f0]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper1
</UL>

<P><STRONG><a name="[9f]"></a>OCC1_Config</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, protection.o(i.OCC1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = OCC1_Config &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_ProtectInit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection_Config
</UL>

<P><STRONG><a name="[a0]"></a>OCC2_Config</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, protection.o(i.OCC2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OCC2_Config &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_ProtectInit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection_Config
</UL>

<P><STRONG><a name="[9d]"></a>OCD1_Config</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, protection.o(i.OCD1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = OCD1_Config &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_ProtectInit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection_Config
</UL>

<P><STRONG><a name="[9e]"></a>OCD2_Config</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, protection.o(i.OCD2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OCD2_Config &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_ProtectInit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection_Config
</UL>

<P><STRONG><a name="[9b]"></a>OV_Config</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, protection.o(i.OV_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = OV_Config &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_ProtectInit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection_Config
</UL>

<P><STRONG><a name="[207]"></a>OnJiChe_AlertInterruptMask</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, jiche_app.o(i.OnJiChe_AlertInterruptMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OnJiChe_AlertInterruptMask &rArr; DVC11XX_ReadRegs &rArr; IIC_ReadDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_ReadRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_MainFun
</UL>

<P><STRONG><a name="[208]"></a>OnJiChe_BrokenLineDetect</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, jiche_app.o(i.OnJiChe_BrokenLineDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OnJiChe_BrokenLineDetect &rArr; DVC11XX_ReadRegs &rArr; IIC_ReadDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_ReadRegs
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COW_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_MainFun
</UL>

<P><STRONG><a name="[209]"></a>OnJiChe_CellBalance</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, jiche_app.o(i.OnJiChe_CellBalance))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OnJiChe_CellBalance &rArr; DVC11XX_ReadRegs &rArr; IIC_ReadDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_ReadRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_MainFun
</UL>

<P><STRONG><a name="[20a]"></a>OnJiChe_ChargerDetect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, jiche_app.o(i.OnJiChe_ChargerDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OnJiChe_ChargerDetect &rArr; DVC11XX_ReadRegs &rArr; IIC_ReadDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_ReadRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_MainFun
</UL>

<P><STRONG><a name="[20b]"></a>OnJiChe_Current</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, jiche_app.o(i.OnJiChe_Current))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OnJiChe_Current &rArr; DVC11XX_ReadRegs &rArr; IIC_ReadDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_ReadRegs
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_CurrentWithCC2
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_CurrentWithCC1
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_MainFun
</UL>

<P><STRONG><a name="[20e]"></a>OnJiChe_FETControl</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, jiche_app.o(i.OnJiChe_FETControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OnJiChe_FETControl &rArr; DVC11XX_ReadRegs &rArr; IIC_ReadDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_ReadRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_MainFun
</UL>

<P><STRONG><a name="[20f]"></a>OnJiChe_Temperature</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, jiche_app.o(i.OnJiChe_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OnJiChe_Temperature &rArr; Read_NFRT &rArr; DVC11XX_ReadRegs &rArr; IIC_ReadDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_ReadRegs
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_ChipTemp
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NFRT
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_BatTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_MainFun
</UL>

<P><STRONG><a name="[211]"></a>OnJiChe_Voltage_Vcell</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, jiche_app.o(i.OnJiChe_Voltage_Vcell))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OnJiChe_Voltage_Vcell &rArr; DVC11XX_ReadRegs &rArr; IIC_ReadDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_ReadRegs
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VCell
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_MainFun
</UL>

<P><STRONG><a name="[212]"></a>OnJiChe_Voltage_other</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, jiche_app.o(i.OnJiChe_Voltage_other))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OnJiChe_Voltage_other &rArr; DVC11XX_ReadRegs &rArr; IIC_ReadDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_ReadRegs
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VPACK
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VLOAD
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VBAT
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_V1P8
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_MainFun
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32h47x_48x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[213]"></a>Sci_ACK_0x03_R_PC_LCD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart_upper.o(i.Sci_ACK_0x03_R_PC_LCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Sci_ACK_0x03_R_PC_LCD &rArr; Uart_R_PC_LCD_ACK_0x03 &rArr; R_LCD_FillData &rArr; System_ERROR_UserCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_R_PC_LCD_ACK_0x03
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03
</UL>

<P><STRONG><a name="[23d]"></a>Sci_WrReg_0x06_SwitchOFF</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart_upper.o(i.Sci_WrReg_0x06_SwitchOFF))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrReg_0x06
</UL>

<P><STRONG><a name="[23c]"></a>Sci_WrReg_0x06_SwitchON</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart_upper.o(i.Sci_WrReg_0x06_SwitchON))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrReg_0x06
</UL>

<P><STRONG><a name="[156]"></a>PCHG_OnOFF</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, short_current.o(i.PCHG_OnOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = PCHG_OnOFF &rArr; PDSG_FETControl &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDSG_FETControl
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drivers_External_Ctrl
</UL>

<P><STRONG><a name="[97]"></a>PDSG_FETControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fetcontrol.o(i.PDSG_FETControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = PDSG_FETControl &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCHG_OnOFF
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_MosInit
</UL>

<P><STRONG><a name="[1e9]"></a>Para_GetAll_StoreData</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, parameter_save_flash.o(i.Para_GetAll_StoreData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Para_GetAll_StoreData
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead_u16Array
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPara_Flash
</UL>

<P><STRONG><a name="[215]"></a>Para_ResetData_AllToDefault</STRONG> (Thumb, 400 bytes, Stack size 264 bytes, parameter_save_flash.o(i.Para_ResetData_AllToDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Para_ResetData_AllToDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_WriteAll_DataDefault
</UL>

<P><STRONG><a name="[217]"></a>Para_WriteAllCycle</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, parameter_save_flash.o(i.Para_WriteAllCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Para_WriteAllCycle &rArr; FlashWrite_u16Array_NoErase
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite_u16Array_NoErase
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_WriteAll_DataRefresh
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_WriteAll_DataDefault
</UL>

<P><STRONG><a name="[fc]"></a>Para_WriteAll_DataDefault</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, parameter_save_flash.o(i.Para_WriteAll_DataDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Para_WriteAll_DataDefault &rArr; Para_ResetData_AllToDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_WriteAllCycle
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_ResetData_AllToDefault
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase_AllRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPara_Flash
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ParaSave_Flash
</UL>

<P><STRONG><a name="[fb]"></a>Para_WriteAll_DataRefresh</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, parameter_save_flash.o(i.Para_WriteAll_DataRefresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Para_WriteAll_DataRefresh &rArr; Para_WriteAllCycle &rArr; FlashWrite_u16Array_NoErase
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_WriteAllCycle
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase_AllRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ParaSave_Flash
</UL>

<P><STRONG><a name="[219]"></a>PreChg_Ctrl</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, lib_iodrivers.o(i.PreChg_Ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreRelay_OPEN_MODE_SameDoor_HavePreChg
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreRelay_OPEN_MODE_DiffDoor_HavePreChg
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreDsgMOS_OPEN_MODE_SameDoor_HavePreChg
</UL>

<P><STRONG><a name="[1fd]"></a>PreDsgMOS_OPEN_MODE_BootStrap_Cir</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, lib_iodrivers.o(i.PreDsgMOS_OPEN_MODE_BootStrap_Cir))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosCtrl_BootStrap_Cir
</UL>

<P><STRONG><a name="[200]"></a>PreDsgMOS_OPEN_MODE_SameDoor_HavePreChg</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, lib_iodrivers.o(i.PreDsgMOS_OPEN_MODE_SameDoor_HavePreChg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PreDsgMOS_OPEN_MODE_SameDoor_HavePreChg
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreChg_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosCtrl_SameDoor_HavePreChg
</UL>

<P><STRONG><a name="[21a]"></a>PreRelay_OPEN_MODE_DiffDoor_HavePreChg</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, lib_iodrivers.o(i.PreRelay_OPEN_MODE_DiffDoor_HavePreChg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PreRelay_OPEN_MODE_DiffDoor_HavePreChg
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreChg_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl_DiffDoor_HavePreChg
</UL>

<P><STRONG><a name="[21b]"></a>PreRelay_OPEN_MODE_SameDoor_HavePreChg</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, lib_iodrivers.o(i.PreRelay_OPEN_MODE_SameDoor_HavePreChg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PreRelay_OPEN_MODE_SameDoor_HavePreChg
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreChg_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl_SameDoor_HavePreChg
</UL>

<P><STRONG><a name="[21c]"></a>Protection_Config</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, jiche_app.o(i.Protection_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Protection_Config &rArr; OCD2_Config &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UV_Config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV_Config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCD2_Config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCD1_Config
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCC2_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCC1_Config
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanError
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_InitFun
</UL>

<P><STRONG><a name="[1e3]"></a>RCC_ConfigFDCANClksrc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32h47x_48x_rcc.o(i.RCC_ConfigFDCANClksrc))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1_Mode
</UL>

<P><STRONG><a name="[1e2]"></a>RCC_ConfigFDCANPllClk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32h47x_48x_rcc.o(i.RCC_ConfigFDCANPllClk))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1_Mode
</UL>

<P><STRONG><a name="[1b1]"></a>RCC_EnableAHB1PeriphClk</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, n32h47x_48x_rcc.o(i.RCC_EnableAHB1PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIO
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrivers_GPIO
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC1
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
</UL>

<P><STRONG><a name="[19e]"></a>RCC_EnableAHBPeriphClk</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, n32h47x_48x_rcc.o(i.RCC_EnableAHBPeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_DMA
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_DMA
</UL>

<P><STRONG><a name="[1a5]"></a>RCC_EnableAPB1PeriphClk</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, n32h47x_48x_rcc.o(i.RCC_EnableAPB1PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_TIMER
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_TIMER
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM_OUT
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1_Mode
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
</UL>

<P><STRONG><a name="[181]"></a>RCC_EnableAPB1PeriphReset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32h47x_48x_rcc.o(i.RCC_EnableAPB1PeriphReset))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNode1_Mode
</UL>

<P><STRONG><a name="[1d5]"></a>RCC_EnableAPB2PeriphClk</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, n32h47x_48x_rcc.o(i.RCC_EnableAPB2PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper3
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper1
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIO
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrivers_GPIO
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
</UL>

<P><STRONG><a name="[182]"></a>RCC_GetClocksFreqValue</STRONG> (Thumb, 406 bytes, Stack size 72 bytes, n32h47x_48x_rcc.o(i.RCC_GetClocksFreqValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_us
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_ms
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[21e]"></a>ReadEEPROM_Byte</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, eeprom.o(i.ReadEEPROM_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ReadEEPROM_Byte &rArr; IIC_Read_Byte_SEE &rArr; IIC_NAck_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadKey
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ERROR_UserCallback
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack_SEE
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop_SEE
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start_SEE
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte_SEE
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte_SEE
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEPROM_Word_NoZone
</UL>

<P><STRONG><a name="[210]"></a>Read_NFRT</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, temperature.o(i.Read_NFRT))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Read_NFRT &rArr; DVC11XX_ReadRegs &rArr; IIC_ReadDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_ReadRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Temperature
</UL>

<P><STRONG><a name="[f3]"></a>RefreshData_Drivers</STRONG> (Thumb, 364 bytes, Stack size 8 bytes, drivers_ctrl.o(i.RefreshData_Drivers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RefreshData_Drivers &rArr; System_ERROR_UserCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ERROR_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MOS_Relay_Ctrl
</UL>

<P><STRONG><a name="[ff]"></a>RefreshData_SOC</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, soc_user.o(i.RefreshData_SOC))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SOC
</UL>

<P><STRONG><a name="[152]"></a>RelayCtrl_DiffDoor_HavePreChg</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, lib_iodrivers.o(i.RelayCtrl_DiffDoor_HavePreChg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RelayCtrl_DiffDoor_HavePreChg &rArr; DriversOnOFF
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayOnOFF_Det_DiffDoor_HavePreChg
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreRelay_OPEN_MODE_DiffDoor_HavePreChg
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainRelay_OPEN_MODE_DiffDoor_HavePreChg
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriversOnOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drivers_Ctrl
</UL>

<P><STRONG><a name="[151]"></a>RelayCtrl_DiffDoor_NoPreChg</STRONG> (Thumb, 822 bytes, Stack size 16 bytes, lib_iodrivers.o(i.RelayCtrl_DiffDoor_NoPreChg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RelayCtrl_DiffDoor_NoPreChg &rArr; DriversOnOFF
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriversOnOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drivers_Ctrl
</UL>

<P><STRONG><a name="[150]"></a>RelayCtrl_SameDoor_HavePreChg</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, lib_iodrivers.o(i.RelayCtrl_SameDoor_HavePreChg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RelayCtrl_SameDoor_HavePreChg &rArr; RelayOnOFF_Det_SameDoor_HavePreChg
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayOnOFF_Det_SameDoor_HavePreChg
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreRelay_OPEN_MODE_SameDoor_HavePreChg
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainRelay_OPEN_MODE_SameDoor_HavePreChg
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriversOnOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drivers_Ctrl
</UL>

<P><STRONG><a name="[14f]"></a>RelayCtrl_SameDoor_NoPreChg</STRONG> (Thumb, 1200 bytes, Stack size 16 bytes, lib_iodrivers.o(i.RelayCtrl_SameDoor_NoPreChg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RelayCtrl_SameDoor_NoPreChg &rArr; DriversOnOFF
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriversOnOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drivers_Ctrl
</UL>

<P><STRONG><a name="[220]"></a>RelayOnOFF_Det_DiffDoor_HavePreChg</STRONG> (Thumb, 756 bytes, Stack size 8 bytes, lib_iodrivers.o(i.RelayOnOFF_Det_DiffDoor_HavePreChg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RelayOnOFF_Det_DiffDoor_HavePreChg
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSG_Relay_DiffDoor_HavePreChg
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHG_Relay_DiffDoor_HavePreChg
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl_DiffDoor_HavePreChg
</UL>

<P><STRONG><a name="[222]"></a>RelayOnOFF_Det_SameDoor_HavePreChg</STRONG> (Thumb, 1206 bytes, Stack size 16 bytes, lib_iodrivers.o(i.RelayOnOFF_Det_SameDoor_HavePreChg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RelayOnOFF_Det_SameDoor_HavePreChg
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Relay_SameDoor_HavePreChg
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl_SameDoor_HavePreChg
</UL>

<P><STRONG><a name="[a1]"></a>SCD_Config</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, protection.o(i.SCD_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SCD_Config &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_ProtectInit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection_Config
</UL>

<P><STRONG><a name="[227]"></a>SOC_Cont_AH_Int_CHG</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, lib_soc.o(i.SOC_Cont_AH_Int_CHG))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SOC_Cont_AH_Int_CHG &rArr; Correction_Terminal
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction_Terminal
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_IntEnhance_Ctrl
</UL>

<P><STRONG><a name="[228]"></a>SOC_Cont_AH_Int_DSG</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, lib_soc.o(i.SOC_Cont_AH_Int_DSG))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SOC_Cont_AH_Int_DSG &rArr; Correction_Terminal
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction_Terminal
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_IntEnhance_Ctrl
</UL>

<P><STRONG><a name="[229]"></a>SOC_Data_Filter</STRONG> (Thumb, 132 bytes, Stack size 4 bytes, lib_soc.o(i.SOC_Data_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SOC_Data_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulusSubb
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_IntEnhance_Ctrl
</UL>

<P><STRONG><a name="[129]"></a>SOC_DealEEPROM_Data</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, lib_soc.o(i.SOC_DealEEPROM_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SOC_DealEEPROM_Data &rArr; Get_OpenCircuit_Value &rArr; GetEndValuee
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtimeSOC_Write_SocWord
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtimeSOC_Get_SocWord
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_OpenCircuit_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_Update_StartUp
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSOC_StartUp
</UL>

<P><STRONG><a name="[22b]"></a>SOC_EEPROM_Deal_Monitor</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, lib_soc.o(i.SOC_EEPROM_Deal_Monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SOC_EEPROM_Deal_Monitor &rArr; runtimeSOC_Write_SocWord &rArr; runtimeSOC_Write_2Word &rArr; FlashWrite_DoubleWord_NoErase &rArr; FLASH_ProgramdoubleWord &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtimeSOC_Write_SocWord
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_IntEnhance_Ctrl
</UL>

<P><STRONG><a name="[101]"></a>SOC_IntEnhance_Ctrl</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lib_soc.o(i.SOC_IntEnhance_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SOC_IntEnhance_Ctrl &rArr; SOC_Update_StartUp &rArr; CalcuSOC_StartUp &rArr; SOC_DealEEPROM_Data &rArr; Get_OpenCircuit_Value &rArr; GetEndValuee
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_Update_StartUp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_State_Transfer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_Result_Pass
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_RefreshData_Monitor
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_EEPROM_Deal_Monitor
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_Data_Filter
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_Cont_AH_Int_DSG
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_Cont_AH_Int_CHG
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSOC_IntEnhance
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction_CapacityFull
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SOC
</UL>

<P><STRONG><a name="[fe]"></a>SOC_OCV_Fix</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, soc_user.o(i.SOC_OCV_Fix))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SOC_OCV_Fix
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SOC
</UL>

<P><STRONG><a name="[22e]"></a>SOC_RefreshData_Monitor</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, lib_soc.o(i.SOC_RefreshData_Monitor))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_IntEnhance_Ctrl
</UL>

<P><STRONG><a name="[22f]"></a>SOC_Result_Pass</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, lib_soc.o(i.SOC_Result_Pass))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_IntEnhance_Ctrl
</UL>

<P><STRONG><a name="[22d]"></a>SOC_State_Transfer</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, lib_soc.o(i.SOC_State_Transfer))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_IntEnhance_Ctrl
</UL>

<P><STRONG><a name="[22c]"></a>SOC_Update_StartUp</STRONG> (Thumb, 358 bytes, Stack size 8 bytes, lib_soc.o(i.SOC_Update_StartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SOC_Update_StartUp &rArr; CalcuSOC_StartUp &rArr; SOC_DealEEPROM_Data &rArr; Get_OpenCircuit_Value &rArr; GetEndValuee
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtimeSOC_Write_SocWord
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_DealEEPROM_Data
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_OpenCircuit_Value
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuSOC_StartUp
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_IntEnhance_Ctrl
</UL>

<P><STRONG><a name="[25f]"></a>Sci1_CommonUpper_FaultChk</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, uart_upper.o(i.Sci1_CommonUpper_FaultChk))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_IRQHandler
</UL>

<P><STRONG><a name="[260]"></a>Sci1_CommonUpper_Rx_Deal</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, uart_upper.o(i.Sci1_CommonUpper_Rx_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sci1_CommonUpper_Rx_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>Sci1_CommonUpper_Tx_Deal</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, uart_upper.o(i.Sci1_CommonUpper_Tx_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sci1_CommonUpper_Tx_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI1
</UL>

<P><STRONG><a name="[25d]"></a>Sci2_CommonUpper_FaultChk</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, uart_upper.o(i.Sci2_CommonUpper_FaultChk))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
</UL>

<P><STRONG><a name="[25e]"></a>Sci2_CommonUpper_Rx_Deal</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, uart_upper.o(i.Sci2_CommonUpper_Rx_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sci2_CommonUpper_Rx_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>Sci2_CommonUpper_Tx_Deal</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, uart_upper.o(i.Sci2_CommonUpper_Tx_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sci2_CommonUpper_Tx_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI2
</UL>

<P><STRONG><a name="[e6]"></a>Sci3_CommonUpper_FaultChk</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, uart_upper.o(i.Sci3_CommonUpper_FaultChk))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI3
</UL>

<P><STRONG><a name="[25c]"></a>Sci3_CommonUpper_Rx_Deal</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, uart_upper.o(i.Sci3_CommonUpper_Rx_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sci3_CommonUpper_Rx_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>Sci3_CommonUpper_Tx_Deal</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, uart_upper.o(i.Sci3_CommonUpper_Tx_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Sci3_CommonUpper_Tx_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI3
</UL>

<P><STRONG><a name="[e2]"></a>Sci_ACK_0x03</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, uart_upper.o(i.Sci_ACK_0x03))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Sci_ACK_0x03 &rArr; Sci_ACK_0x03_ReadRegs_LCD &rArr; Sci_ACK_0x03_ReadRegs_EventRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03_ReadRegs_LCD
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03_ReadRegs_Data
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03_R_PC_LCD
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03_RW_Data_Pro
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03_RW_Data_OtherCanAdd
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03_RW_Data_Other
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03_RW_Data_Cali
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI3
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI1
</UL>

<P><STRONG><a name="[235]"></a>Sci_ACK_0x03_RW_Data_Cali</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, uart_upper.o(i.Sci_ACK_0x03_RW_Data_Cali))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Sci_ACK_0x03_RW_Data_Cali
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03
</UL>

<P><STRONG><a name="[233]"></a>Sci_ACK_0x03_RW_Data_Other</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, uart_upper.o(i.Sci_ACK_0x03_RW_Data_Other))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Sci_ACK_0x03_RW_Data_Other
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03
</UL>

<P><STRONG><a name="[232]"></a>Sci_ACK_0x03_RW_Data_OtherCanAdd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart_upper.o(i.Sci_ACK_0x03_RW_Data_OtherCanAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sci_ACK_0x03_RW_Data_OtherCanAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03
</UL>

<P><STRONG><a name="[234]"></a>Sci_ACK_0x03_RW_Data_Pro</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart_upper.o(i.Sci_ACK_0x03_RW_Data_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sci_ACK_0x03_RW_Data_Pro
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03
</UL>

<P><STRONG><a name="[230]"></a>Sci_ACK_0x03_ReadRegs_Data</STRONG> (Thumb, 672 bytes, Stack size 24 bytes, uart_upper.o(i.Sci_ACK_0x03_ReadRegs_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sci_ACK_0x03_ReadRegs_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03
</UL>

<P><STRONG><a name="[236]"></a>Sci_ACK_0x03_ReadRegs_EventRecord</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, log_record.o(i.Sci_ACK_0x03_ReadRegs_EventRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Sci_ACK_0x03_ReadRegs_EventRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03_ReadRegs_LCD
</UL>

<P><STRONG><a name="[231]"></a>Sci_ACK_0x03_ReadRegs_LCD</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, uart_upper.o(i.Sci_ACK_0x03_ReadRegs_LCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Sci_ACK_0x03_ReadRegs_LCD &rArr; Sci_ACK_0x03_ReadRegs_EventRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03_ReadRegs_EventRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03
</UL>

<P><STRONG><a name="[e3]"></a>Sci_ACK_0x06_0x10</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, uart_upper.o(i.Sci_ACK_0x06_0x10))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sci_ACK_0x06_0x10 &rArr; Sci_CRC16RTU
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI3
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI1
</UL>

<P><STRONG><a name="[10f]"></a>Sci_CRC16RTU</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pub_func.o(i.Sci_CRC16RTU))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sci_CRC16RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x11
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x10
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0F
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0E
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0D
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0C
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0B
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x0A
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x09
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x08
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x07
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x06
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x05
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x04
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x03
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x02
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x01
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_0x00
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x06_0x10
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_verify
</UL>

<P><STRONG><a name="[1c6]"></a>Sci_DataInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, uart_upper.o(i.Sci_DataInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_Upper3
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_Upper2
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_Upper
</UL>

<P><STRONG><a name="[df]"></a>Sci_Deal_ReadRegs_0x03</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, uart_upper.o(i.Sci_Deal_ReadRegs_0x03))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI3
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI1
</UL>

<P><STRONG><a name="[e0]"></a>Sci_Deal_WrReg_0x06</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, uart_upper.o(i.Sci_Deal_WrReg_0x06))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Sci_Deal_WrReg_0x06 &rArr; Sci_WrReg_0x06_Reset_CalibCoef &rArr; WriteEEPROM_Word_WithZone &rArr; WriteEEPROM_Word_NoZone &rArr; WriteEEPROM_Byte &rArr; IIC_Wait_Ack_SEE &rArr; IIC_Stop_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_SwitchON
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_SwitchOFF
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_SetSocOnce
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_Reset_ProtectRecord
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_Reset_ProtectElement
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_Reset_OtherCanAdd
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_Reset_HeatCool
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_Reset_CalibCoef
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_BMS_FunctionON
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_BMS_FunctionOFF
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_Reset_EventRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI3
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI1
</UL>

<P><STRONG><a name="[e1]"></a>Sci_Deal_WrRegs_0x10</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, uart_upper.o(i.Sci_Deal_WrRegs_0x10))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sci_Deal_WrRegs_0x10 &rArr; Sci_WrRegs_0x10_Protect &rArr; InitData_SOC
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_SystemElement
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_SysOther
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_SocTable
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_SocElement
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_SleepElement
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_SN_Version
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_RTC
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_Protect
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_HeatCoolElement
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_FlashConnect
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_CopperLoss
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_CalibCoef
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrRegs_0x10_Balance
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI3
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommonUpperSCI1
</UL>

<P><STRONG><a name="[23f]"></a>Sci_WrReg_0x06_BMS_FunctionOFF</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, uart_upper.o(i.Sci_WrReg_0x06_BMS_FunctionOFF))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrReg_0x06
</UL>

<P><STRONG><a name="[23e]"></a>Sci_WrReg_0x06_BMS_FunctionON</STRONG> (Thumb, 232 bytes, Stack size 12 bytes, uart_upper.o(i.Sci_WrReg_0x06_BMS_FunctionON))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Sci_WrReg_0x06_BMS_FunctionON
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrReg_0x06
</UL>

<P><STRONG><a name="[237]"></a>Sci_WrReg_0x06_Reset_CalibCoef</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, uart_upper.o(i.Sci_WrReg_0x06_Reset_CalibCoef))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Sci_WrReg_0x06_Reset_CalibCoef &rArr; WriteEEPROM_Word_WithZone &rArr; WriteEEPROM_Word_NoZone &rArr; WriteEEPROM_Byte &rArr; IIC_Wait_Ack_SEE &rArr; IIC_Stop_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEPROM_Word_WithZone
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrReg_0x06
</UL>

<P><STRONG><a name="[241]"></a>Sci_WrReg_0x06_Reset_EventRecord</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, log_record.o(i.Sci_WrReg_0x06_Reset_EventRecord))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrReg_0x06
</UL>

<P><STRONG><a name="[23b]"></a>Sci_WrReg_0x06_Reset_HeatCool</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, uart_upper.o(i.Sci_WrReg_0x06_Reset_HeatCool))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sci_WrReg_0x06_Reset_HeatCool
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrReg_0x06
</UL>

<P><STRONG><a name="[23a]"></a>Sci_WrReg_0x06_Reset_OtherCanAdd</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, uart_upper.o(i.Sci_WrReg_0x06_Reset_OtherCanAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Sci_WrReg_0x06_Reset_OtherCanAdd &rArr; InitData_SOC
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_Drivers
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_Balance
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_SleepFunc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_SOC
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrReg_0x06
</UL>

<P><STRONG><a name="[239]"></a>Sci_WrReg_0x06_Reset_ProtectElement</STRONG> (Thumb, 120 bytes, Stack size 144 bytes, uart_upper.o(i.Sci_WrReg_0x06_Reset_ProtectElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Sci_WrReg_0x06_Reset_ProtectElement &rArr; InitData_SOC
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_SOC
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrReg_0x06
</UL>

<P><STRONG><a name="[238]"></a>Sci_WrReg_0x06_Reset_ProtectRecord</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, uart_upper.o(i.Sci_WrReg_0x06_Reset_ProtectRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sci_WrReg_0x06_Reset_ProtectRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrReg_0x06
</UL>

<P><STRONG><a name="[240]"></a>Sci_WrReg_0x06_SetSocOnce</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uart_upper.o(i.Sci_WrReg_0x06_SetSocOnce))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrReg_0x06
</UL>

<P><STRONG><a name="[247]"></a>Sci_WrRegs_0x10_Balance</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, uart_upper.o(i.Sci_WrRegs_0x10_Balance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sci_WrRegs_0x10_Balance
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_Balance
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrRegs_0x10
</UL>

<P><STRONG><a name="[242]"></a>Sci_WrRegs_0x10_CalibCoef</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, uart_upper.o(i.Sci_WrRegs_0x10_CalibCoef))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Sci_WrRegs_0x10_CalibCoef
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrRegs_0x10
</UL>

<P><STRONG><a name="[245]"></a>Sci_WrRegs_0x10_CopperLoss</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, uart_upper.o(i.Sci_WrRegs_0x10_CopperLoss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Sci_WrRegs_0x10_CopperLoss
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrRegs_0x10
</UL>

<P><STRONG><a name="[24e]"></a>Sci_WrRegs_0x10_FlashConnect</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart_upper.o(i.Sci_WrRegs_0x10_FlashConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sci_WrRegs_0x10_FlashConnect
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkpRam_WriteUINT16
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrRegs_0x10
</UL>

<P><STRONG><a name="[24c]"></a>Sci_WrRegs_0x10_HeatCoolElement</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, uart_upper.o(i.Sci_WrRegs_0x10_HeatCoolElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sci_WrRegs_0x10_HeatCoolElement
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrRegs_0x10
</UL>

<P><STRONG><a name="[243]"></a>Sci_WrRegs_0x10_Protect</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, uart_upper.o(i.Sci_WrRegs_0x10_Protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sci_WrRegs_0x10_Protect &rArr; InitData_SOC
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_SOC
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrRegs_0x10
</UL>

<P><STRONG><a name="[246]"></a>Sci_WrRegs_0x10_RTC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart_upper.o(i.Sci_WrRegs_0x10_RTC))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrRegs_0x10
</UL>

<P><STRONG><a name="[24d]"></a>Sci_WrRegs_0x10_SN_Version</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, uart_upper.o(i.Sci_WrRegs_0x10_SN_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Sci_WrRegs_0x10_SN_Version
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrRegs_0x10
</UL>

<P><STRONG><a name="[249]"></a>Sci_WrRegs_0x10_SleepElement</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, uart_upper.o(i.Sci_WrRegs_0x10_SleepElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sci_WrRegs_0x10_SleepElement
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_SleepFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrRegs_0x10
</UL>

<P><STRONG><a name="[24a]"></a>Sci_WrRegs_0x10_SocElement</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uart_upper.o(i.Sci_WrRegs_0x10_SocElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sci_WrRegs_0x10_SocElement &rArr; InitData_SOC
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_SOC
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrRegs_0x10
</UL>

<P><STRONG><a name="[244]"></a>Sci_WrRegs_0x10_SocTable</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, uart_upper.o(i.Sci_WrRegs_0x10_SocTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sci_WrRegs_0x10_SocTable &rArr; InitData_SOC
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_SOC
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrRegs_0x10
</UL>

<P><STRONG><a name="[248]"></a>Sci_WrRegs_0x10_SysOther</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, uart_upper.o(i.Sci_WrRegs_0x10_SysOther))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sci_WrRegs_0x10_SysOther
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrRegs_0x10
</UL>

<P><STRONG><a name="[24b]"></a>Sci_WrRegs_0x10_SystemElement</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, uart_upper.o(i.Sci_WrRegs_0x10_SystemElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sci_WrRegs_0x10_SystemElement
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_Drivers
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitData_Balance
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Deal_WrRegs_0x10
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32h47x_48x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[254]"></a>Sys_FindProtectFilterMax</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, system_monitor.o(i.Sys_FindProtectFilterMax))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_FUNC_StartUp
</UL>

<P><STRONG><a name="[79]"></a>SystemInit</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, system_n32h47x_48x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStartupVolt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>System_ERROR_UserCallback</STRONG> (Thumb, 414 bytes, Stack size 8 bytes, system_monitor.o(i.System_ERROR_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = System_ERROR_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_LCD_FillData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshData_Drivers
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEPROM_Word_WithZone
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEPROM_Byte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ShortCurDeal_AFE
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_VdeltaOp_ThirdCheck
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLoad_CellVolt
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drivers_External_Ctrl
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllSeriesDeal_Sleep_Or_None
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBC_CtrlMOS
</UL>

<P><STRONG><a name="[a6]"></a>System_FUNC_StartUp</STRONG> (Thumb, 382 bytes, Stack size 20 bytes, system_monitor.o(i.System_FUNC_StartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = System_FUNC_StartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_FindProtectFilterMax
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ADC
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_Control
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cool_Control
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SOC
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MOS_Relay_Ctrl
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CanCom
</UL>

<P><STRONG><a name="[255]"></a>TASK_JiChe_APP</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, jiche_app.o(i.TASK_JiChe_APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = TASK_JiChe_APP &rArr; TASK_JiChe_MainFun &rArr; OnJiChe_Temperature &rArr; Read_NFRT &rArr; DVC11XX_ReadRegs &rArr; IIC_ReadDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_MainFun
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_InitFun
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_ERRFun
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JiChe_FaultDispose
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JiCheChangeRunStep
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[258]"></a>TASK_JiChe_ERRFun</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jiche_app.o(i.TASK_JiChe_ERRFun))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_APP
</UL>

<P><STRONG><a name="[256]"></a>TASK_JiChe_InitFun</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, jiche_app.o(i.TASK_JiChe_InitFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TASK_JiChe_InitFun &rArr; Protection_Config &rArr; OCD2_Config &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_InitRegs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanError
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_RST
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection_Config
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JiCheChangeRunStep
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPn_ModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_APP
</UL>

<P><STRONG><a name="[257]"></a>TASK_JiChe_MainFun</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, jiche_app.o(i.TASK_JiChe_MainFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = TASK_JiChe_MainFun &rArr; OnJiChe_Temperature &rArr; Read_NFRT &rArr; DVC11XX_ReadRegs &rArr; IIC_ReadDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Voltage_other
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Voltage_Vcell
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Temperature
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_FETControl
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Current
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_ChargerDetect
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_CellBalance
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_BrokenLineDetect
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_AlertInterruptMask
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JiCheChangeMainStep
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_APP
</UL>

<P><STRONG><a name="[10d]"></a>TIM_ClrIntPendingBit</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, n32h47x_48x_tim.o(i.TIM_ClrIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[1ab]"></a>TIM_ConfigArPreload</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32h47x_48x_tim.o(i.TIM_ConfigArPreload))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_TIMER
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_TIMER
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM_OUT
</UL>

<P><STRONG><a name="[1ef]"></a>TIM_ConfigInt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32h47x_48x_tim.o(i.TIM_ConfigInt))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[1e8]"></a>TIM_ConfigOc2Preload</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32h47x_48x_tim.o(i.TIM_ConfigOc2Preload))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM_OUT
</UL>

<P><STRONG><a name="[1e6]"></a>TIM_ConfigOc3Preload</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32h47x_48x_tim.o(i.TIM_ConfigOc3Preload))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM_OUT
</UL>

<P><STRONG><a name="[1aa]"></a>TIM_ConfigOc4Preload</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32h47x_48x_tim.o(i.TIM_ConfigOc4Preload))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_TIMER
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_TIMER
</UL>

<P><STRONG><a name="[1ac]"></a>TIM_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32h47x_48x_tim.o(i.TIM_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_TIMER
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_TIMER
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM_OUT
</UL>

<P><STRONG><a name="[10c]"></a>TIM_GetIntStatus</STRONG> (Thumb, 234 bytes, Stack size 12 bytes, n32h47x_48x_tim.o(i.TIM_GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[1e7]"></a>TIM_InitOc2</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, n32h47x_48x_tim.o(i.TIM_InitOc2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_InitOc2
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM_OUT
</UL>

<P><STRONG><a name="[1e5]"></a>TIM_InitOc3</STRONG> (Thumb, 170 bytes, Stack size 12 bytes, n32h47x_48x_tim.o(i.TIM_InitOc3))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_InitOc3
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM_OUT
</UL>

<P><STRONG><a name="[1a9]"></a>TIM_InitOc4</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, n32h47x_48x_tim.o(i.TIM_InitOc4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_InitOc4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_TIMER
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_TIMER
</UL>

<P><STRONG><a name="[1a8]"></a>TIM_InitOcStruct</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32h47x_48x_tim.o(i.TIM_InitOcStruct))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_TIMER
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_TIMER
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM_OUT
</UL>

<P><STRONG><a name="[1a6]"></a>TIM_InitTimBaseStruct</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, n32h47x_48x_tim.o(i.TIM_InitTimBaseStruct))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_TIMER
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_TIMER
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM_OUT
</UL>

<P><STRONG><a name="[1a7]"></a>TIM_InitTimeBase</STRONG> (Thumb, 886 bytes, Stack size 36 bytes, n32h47x_48x_tim.o(i.TIM_InitTimeBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_InitTimeBase
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC2_TIMER
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC1_TIMER
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM_OUT
</UL>

<P><STRONG><a name="[3e]"></a>UART5_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, n32h47x_48x_it.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART5_IRQHandler &rArr; Sci3_CommonUpper_Rx_Deal
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci3_CommonUpper_Rx_Deal
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci3_CommonUpper_FaultChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART7_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, n32h47x_48x_it.o(i.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART7_IRQHandler &rArr; Sci2_CommonUpper_Rx_Deal
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci2_CommonUpper_Rx_Deal
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci2_CommonUpper_FaultChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, n32h47x_48x_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; Sci3_CommonUpper_Rx_Deal
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci3_CommonUpper_Rx_Deal
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci3_CommonUpper_FaultChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, n32h47x_48x_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; Sci3_CommonUpper_Rx_Deal
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci3_CommonUpper_Rx_Deal
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci3_CommonUpper_FaultChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART4_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, n32h47x_48x_it.o(i.USART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART4_IRQHandler &rArr; Sci1_CommonUpper_Rx_Deal
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci1_CommonUpper_Rx_Deal
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci1_CommonUpper_FaultChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[1f2]"></a>USART_CfgDriverAssertTime</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32h47x_48x_usart.o(i.USART_CfgDriverAssertTime))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper1
</UL>

<P><STRONG><a name="[1f3]"></a>USART_CfgDriverdeassertTime</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32h47x_48x_usart.o(i.USART_CfgDriverdeassertTime))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper1
</UL>

<P><STRONG><a name="[1f6]"></a>USART_ConfigInt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, n32h47x_48x_usart.o(i.USART_ConfigInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper3
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper1
</UL>

<P><STRONG><a name="[1f5]"></a>USART_DriverModeSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32h47x_48x_usart.o(i.USART_DriverModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper1
</UL>

<P><STRONG><a name="[1f4]"></a>USART_DriverPolaritySet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32h47x_48x_usart.o(i.USART_DriverPolaritySet))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper1
</UL>

<P><STRONG><a name="[1f7]"></a>USART_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32h47x_48x_usart.o(i.USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper3
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper1
</UL>

<P><STRONG><a name="[25a]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32h47x_48x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[25b]"></a>USART_GetIntStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, n32h47x_48x_usart.o(i.USART_GetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[1f1]"></a>USART_Init</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, n32h47x_48x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper3
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART_CommonUpper1
</UL>

<P><STRONG><a name="[9c]"></a>UV_Config</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, protection.o(i.UV_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = UV_Config &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_ProtectInit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection_Config
</UL>

<P><STRONG><a name="[214]"></a>Uart_R_PC_LCD_ACK_0x03</STRONG> (Thumb, 736 bytes, Stack size 24 bytes, uart_lcd.o(i.Uart_R_PC_LCD_ACK_0x03))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Uart_R_PC_LCD_ACK_0x03 &rArr; R_LCD_FillData &rArr; System_ERROR_UserCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_LCD_FillData
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_ACK_0x03_R_PC_LCD
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32h47x_48x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h474.o(RESET)
</UL>
<P><STRONG><a name="[261]"></a>WriteEEPROM_Byte</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, eeprom.o(i.WriteEEPROM_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = WriteEEPROM_Byte &rArr; IIC_Wait_Ack_SEE &rArr; IIC_Stop_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadKey
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_ms
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack_SEE
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop_SEE
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start_SEE
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte_SEE
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEPROM_Word_NoZone
</UL>

<P><STRONG><a name="[262]"></a>WriteEEPROM_Word_NoZone</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, eeprom.o(i.WriteEEPROM_Word_NoZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = WriteEEPROM_Word_NoZone &rArr; WriteEEPROM_Byte &rArr; IIC_Wait_Ack_SEE &rArr; IIC_Stop_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEPROM_Byte
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEPROM_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEPROM_Word_WithZone
</UL>

<P><STRONG><a name="[24f]"></a>WriteEEPROM_Word_WithZone</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, eeprom.o(i.WriteEEPROM_Word_WithZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = WriteEEPROM_Word_WithZone &rArr; WriteEEPROM_Word_NoZone &rArr; WriteEEPROM_Byte &rArr; IIC_Wait_Ack_SEE &rArr; IIC_Stop_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ERROR_UserCallback
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEPROM_Word_NoZone
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_WrReg_0x06_Reset_CalibCoef
</UL>

<P><STRONG><a name="[107]"></a>__delay_ms</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, timer.o(i.__delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __delay_ms &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEPROM_Byte
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Sys_FlashUpdate
</UL>

<P><STRONG><a name="[184]"></a>__delay_us</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, timer.o(i.__delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack_SEE
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop_SEE
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start_SEE
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte_SEE
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte_SEE
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck_SEE
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack_SEE
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[281]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[282]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[283]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[189]"></a>calc_crc8</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dvc11xx.o(i.calc_crc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calc_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteDataWithCRC
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadDataWithCRC
</UL>

<P><STRONG><a name="[20d]"></a>delay_ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_InitFun
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJiChe_Current
</UL>

<P><STRONG><a name="[14a]"></a>delay_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = delay_us &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_ReadRegs
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
</UL>

<P><STRONG><a name="[186]"></a>i2c_master_init</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, i2c.o(i.i2c_master_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = i2c_master_init &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InitStruct
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHB1PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>

<P><STRONG><a name="[78]"></a>main</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = main &rArr; App_Sci &rArr; App_CommonUpper &rArr; App_CommonUpperSCI3 &rArr; Sci_Deal_WrReg_0x06 &rArr; Sci_WrReg_0x06_Reset_CalibCoef &rArr; WriteEEPROM_Word_WithZone &rArr; WriteEEPROM_Word_NoZone &rArr; WriteEEPROM_Byte &rArr; IIC_Wait_Ack_SEE &rArr; IIC_Stop_SEE &rArr; __delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadKey
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BalanceProcess
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ADC
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Sys_FlashUpdate
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SysPower
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SysTime
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ShortCurDeal_AFE
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_APP
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WarnCtrl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Sci
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SOC
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MOS_Relay_Ctrl
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Heat_Cool_Ctrl
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ChargerLoad_Det
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CanCom
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CBC
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVar
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_AFE_DataDeal
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ParaSave_Flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1eb]"></a>runtimeSOC_Get_SocWord</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, runtimedata_save_flash.o(i.runtimeSOC_Get_SocWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = runtimeSOC_Get_SocWord
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtimeSOC_Read_UINT32
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_DealEEPROM_Data
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSOC_IntEnhance
</UL>

<P><STRONG><a name="[268]"></a>runtimeSOC_PageErase</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, runtimedata_save_flash.o(i.runtimeSOC_PageErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = runtimeSOC_PageErase &rArr; FlashErase_OnePage &rArr; FLASH_EraseOnePage &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase_OnePage
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtimeSOC_Write_SocWord
</UL>

<P><STRONG><a name="[267]"></a>runtimeSOC_Read_UINT32</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, runtimedata_save_flash.o(i.runtimeSOC_Read_UINT32))
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead_OneWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtimeSOC_Get_SocWord
</UL>

<P><STRONG><a name="[26a]"></a>runtimeSOC_Write_2Word</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, runtimedata_save_flash.o(i.runtimeSOC_Write_2Word))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = runtimeSOC_Write_2Word &rArr; FlashWrite_DoubleWord_NoErase &rArr; FLASH_ProgramdoubleWord &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite_DoubleWord_NoErase
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtimeSOC_Write_SocWord
</UL>

<P><STRONG><a name="[22a]"></a>runtimeSOC_Write_SocWord</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, runtimedata_save_flash.o(i.runtimeSOC_Write_SocWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = runtimeSOC_Write_SocWord &rArr; runtimeSOC_Write_2Word &rArr; FlashWrite_DoubleWord_NoErase &rArr; FLASH_ProgramdoubleWord &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtimeSOC_Write_2Word
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtimeSOC_PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_Update_StartUp
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_EEPROM_Deal_Monitor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_DealEEPROM_Data
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[253]"></a>SetStartupVolt</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, system_n32h47x_48x.o(i.SetStartupVolt))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[252]"></a>SetSysClock</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, system_n32h47x_48x.o(i.SetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[15e]"></a>FDCAN_CopyMsgToRAM</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, n32h47x_48x_fdcan.o(i.FDCAN_CopyMsgToRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FDCAN_CopyMsgToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_AddMsgToTxFifoQ
</UL>

<P><STRONG><a name="[161]"></a>FDCAN_InitMsgRam</STRONG> (Thumb, 340 bytes, Stack size 20 bytes, n32h47x_48x_fdcan.o(i.FDCAN_InitMsgRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FDCAN_InitMsgRam
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Init
</UL>

<P><STRONG><a name="[263]"></a>DBG_SysTick_Config</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, timer.o(i.DBG_SysTick_Config))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_us
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_ms
</UL>

<P><STRONG><a name="[17d]"></a>I2C_Configure</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, i2c.o(i.I2C_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_TransferDataRaw
</UL>

<P><STRONG><a name="[146]"></a>DVC11XX_InitRegs</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, jiche_app.o(i.DVC11XX_InitRegs))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DVC11XX_InitRegs &rArr; DVC11XX_WriteRegs &rArr; IIC_WriteDataWithCRC &rArr; IIC_TransferDataRaw &rArr; I2C_Configure &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_WriteRegs
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_JiChe_InitFun
</UL>

<P><STRONG><a name="[143]"></a>CellVolSecondaryCalibrate</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, voltage.o(i.CellVolSecondaryCalibrate))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVC11XX_Calc_VCell
</UL>

<P><STRONG><a name="[21d]"></a>R_LCD_FillData</STRONG> (Thumb, 630 bytes, Stack size 16 bytes, uart_lcd.o(i.R_LCD_FillData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_LCD_FillData &rArr; System_ERROR_UserCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ERROR_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_R_PC_LCD_ACK_0x03
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
